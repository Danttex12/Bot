#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ Telegram API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from odanna_bot import DatabaseManager, AIManager, OdannaBot
import sqlite3
import tempfile

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÉÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        db_path = temp_db.name
    
    try:
        db = DatabaseManager(db_path)
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user(12345, "test_user", "–¢–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "female")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        chat_id = db.create_chat(12345, "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç")
        print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat_id}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        db.add_message(chat_id, 12345, "–ü—Ä–∏–≤–µ—Ç, –û–¥–∞–Ω–Ω–∞!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É.", "—Ä–∞–¥–æ—Å—Ç—å", 45)
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = db.get_chat_history(chat_id)
        assert len(history) == 1
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–∑–∞–±—ã—Ç—å"
        db.ignore_message(chat_id, "–ü—Ä–∏–≤–µ—Ç, –û–¥–∞–Ω–Ω–∞!")
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    finally:
        os.unlink(db_path)

def test_ai_manager():
    """–¢–µ—Å—Ç –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    
    ai = AIManager()
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
    emotions = ai.analyze_emotion("–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è...")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π: {emotions}")
    
    emotions2 = ai.analyze_emotion("–ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π: {emotions2}")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —ç–º–ø–∞—Ç–∏–∏
    empathy = ai.calculate_empathy_level("–≥—Ä—É—Å—Ç—å", 35, 5)
    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏: {empathy}%")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (fallback)
    response = ai._fallback_response("–ú–Ω–µ –ø–ª–æ—Ö–æ", 60, "–≥—Ä—É—Å—Ç—å")
    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:50]}...")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")

def test_character_responses():
    """–¢–µ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –û–¥–∞–Ω–Ω—ã"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –û–¥–∞–Ω–Ω—ã...")
    
    ai = AIManager()
    
    test_cases = [
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", 35, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"),
        ("–ú–Ω–µ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ...", 70, "–≥—Ä—É—Å—Ç—å"),
        ("–°–ø–∞—Å–∏–±–æ –≤–∞–º!", 50, "—Ä–∞–¥–æ—Å—Ç—å"),
        ("–ß—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ?", 40, "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ"),
        ("–Ø —É—Å—Ç–∞–ª –æ—Ç –≤—Å–µ–≥–æ", 65, "–≥—Ä—É—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å")
    ]
    
    for message, empathy, emotion in test_cases:
        response = ai._fallback_response(message, empathy, emotion)
        print(f"\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"üòä –≠–º–ø–∞—Ç–∏—è: {empathy}%")
        print(f"üí≠ –≠–º–æ—Ü–∏—è: {emotion}")
        print(f"üèÆ –û–¥–∞–Ω–Ω–∞: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É
        if empathy < 45:
            assert any(marker in response for marker in ["*", "–ö–∞–∫... –ª—é–±–æ–ø—ã—Ç–Ω–æ", "–ø—Ä–∏—â—É—Ä–∏–≤–∞–µ—Ç"]), \
                "–ù–∏–∑–∫–∞—è —ç–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Ä–æ–Ω–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
        
        if empathy > 60 and "–≥—Ä—É—Å—Ç—å" in emotion:
            assert any(word in response for word in ["–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–∑–∞–±–æ—Ç–∞", "–Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å", "–¥–æ–≤–µ—Ä—å—Ç–µ—Å—å"]), \
                "–í—ã—Å–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")

def test_memory_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        db_path = temp_db.name
    
    try:
        db = DatabaseManager(db_path)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.add_user(12345, "test_user")
        chat_id = db.create_chat(12345, "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            "–ü—Ä–∏–≤–µ—Ç!",
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
            "–ó–∞–±—É–¥—å –ø—Ä–æ –≤—á–µ—Ä–∞—à–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
        ]
        
        for i, msg in enumerate(messages):
            db.add_message(chat_id, 12345, msg, f"–û—Ç–≤–µ—Ç {i+1}", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", 40)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = db.get_chat_history(chat_id)
        assert len(history) == 4
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑ 4 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–∑–∞–±—ã—Ç—å"
        db.ignore_message(chat_id, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT is_ignored FROM messages 
            WHERE chat_id = ? AND message_text = ?
        ''', (chat_id, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"))
        result = cursor.fetchone()
        conn.close()
        
        assert result[0] == 1  # TRUE –≤ SQLite = 1
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ")
        
        # –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        db.unignore_message(chat_id, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    finally:
        os.unlink(db_path)

def test_empathy_progression():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —ç–º–ø–∞—Ç–∏–∏"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —ç–º–ø–∞—Ç–∏–∏...")
    
    ai = AIManager()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    dialogue_stages = [
        (1, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", 35),  # –ù–∞—á–∞–ª–æ
        (3, "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", 35),  # –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        (5, "—Ä–∞–¥–æ—Å—Ç—å", 50),      # –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
        (8, "–≥—Ä—É—Å—Ç—å", 50),       # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        (12, "–≥—Ä—É—Å—Ç—å", 70),      # –î–æ–ª–≥–∏–π –¥–∏–∞–ª–æ–≥
        (15, "—Ä–∞–¥–æ—Å—Ç—å", 70),     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    ]
    
    prev_empathy = 35
    for msg_count, emotion, expected_base in dialogue_stages:
        empathy = ai.calculate_empathy_level(emotion, prev_empathy, msg_count)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_count}: {emotion} ‚Üí –≠–º–ø–∞—Ç–∏—è {empathy}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–ø–∞—Ç–∏—è –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ª–æ–≥–∏—á–Ω–æ
        if "–≥—Ä—É—Å—Ç—å" in emotion:
            assert empathy >= prev_empathy, "–≠–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Ç–∏ –ø—Ä–∏ –≥—Ä—É—Å—Ç–∏"
        
        assert 35 <= empathy <= 85, "–≠–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 35-85%"
        prev_empathy = empathy
    
    print("üéâ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —ç–º–ø–∞—Ç–∏–∏ –ø—Ä–æ–π–¥–µ–Ω!")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞...\n")
    
    try:
        test_database()
        test_ai_manager()
        test_character_responses()
        test_memory_system()
        test_empathy_progression()
        
        print("\n" + "="*50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ")
        print("üèÆ –û–¥–∞–Ω–Ω–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("="*50)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)