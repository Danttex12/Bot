import logging
import os
from telegram import Update, ParseMode
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, CallbackQueryHandler,
    Filters, ConversationHandler, PicklePersistence
)
from typing import Dict, Any

from config import BOT_TOKEN, ADMIN_ID, LOGGING_CONFIG
from database import Database
from ai_model import AIModel
from chat_manager import ChatManager
from keyboard_manager import KeyboardManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOGGING_CONFIG["level"]),
    format=LOGGING_CONFIG["format"],
    filename=LOGGING_CONFIG["filename"]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    MAIN_MENU, CREATE_CHAT, CHAT_LIST, CHAT_DETAIL, CHAT_INTERFACE,
    CREATE_WITH_SETTINGS, SCENARIO_SELECTION, EMPATHY_SELECTION,
    LENGTH_SELECTION, PERSONALITY_SELECTION, CHAT_SETTINGS,
    RENAME_CHAT, ADMIN_PANEL
) = range(13)

class OdannaBot:
    def __init__(self):
        self.db = Database()
        self.ai_model = AIModel()
        self.chat_manager = ChatManager(self.db, self.ai_model)
        self.keyboard_manager = KeyboardManager()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.ai_model.load_model()
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.updater = Updater(BOT_TOKEN, use_context=True)
        self.dp = self.updater.dispatcher
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        logger.info("–ë–æ—Ç –û–¥–∞–Ω–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        start_handler = CommandHandler('start', self.start_command)
        self.dp.add_handler(start_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        help_handler = CommandHandler('help', self.help_command)
        self.dp.add_handler(help_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
        admin_handler = CommandHandler('admin', self.admin_command)
        self.dp.add_handler(admin_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        callback_handler = CallbackQueryHandler(self.handle_callback)
        self.dp.add_handler(callback_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        message_handler = MessageHandler(Filters.text & ~Filters.command, self.handle_message)
        self.dp.add_handler(message_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dp.add_error_handler(self.error_handler)
    
    def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_gender = "female" if user.first_name and user.first_name.endswith(('–∞', '—è')) else "male"
        
        welcome_text = (
            f"üè® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ù–µ–±–µ—Å–Ω—É—é –ì–æ—Å—Ç–∏–Ω–∏—Ü—É**, —É–≤–∞–∂–∞–µ–º—ã–π –≥–æ—Å—Ç—å.\n\n"
            f"–Ø ‚Äî **–û–¥–∞–Ω–Ω–∞**, —Ö–æ–∑—è–∏–Ω —ç—Ç–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–∫–æ–π "
            f"–∏ —É–µ–¥–∏–Ω–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.\n\n"
            f"–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
        )
        
        if user_gender == "female":
            welcome_text = welcome_text.replace("—É–≤–∞–∂–∞–µ–º—ã–π –≥–æ—Å—Ç—å", "—É–≤–∞–∂–∞–µ–º–∞—è –≥–æ—Å—Ç—å—è")
        
        keyboard = self.keyboard_manager.get_main_menu_keyboard()
        
        update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        return MAIN_MENU
    
    def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üè® **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞**\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
            "‚Ä¢ –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ —É—Ä–æ–≤–Ω—è —ç–º–ø–∞—Ç–∏–∏\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ '–∑–∞–±—É–¥—å [—Ç–µ–∫—Å—Ç]' –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤\n\n"
            "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –û–¥–∞–Ω–Ω—ã:**\n"
            "‚Ä¢ –í–µ–∂–ª–∏–≤—ã–π, –Ω–æ –≤–ª–∞—Å—Ç–Ω—ã–π —Ç–æ–Ω\n"
            "‚Ä¢ –°–∞—Ä–∫–∞–∑–º –∏ –∏—Ä–æ–Ω–∏—è\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–∞ '—Å–≤–æ–∏—Ö' –∏ –≥–æ—Å—Ç–µ–π\n"
            "‚Ä¢ –¢–µ–ø–ª–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∂–µ–Ω—â–∏–Ω–∞–º\n\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º –≤ –ù–µ–±–µ—Å–Ω–æ–π –ì–æ—Å—Ç–∏–Ω–∏—Ü–µ! üè®"
        )
        
        keyboard = self.keyboard_manager.get_help_keyboard()
        
        update.message.reply_text(
            help_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        return MAIN_MENU
    
    def admin_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return MAIN_MENU
        
        admin_text = (
            "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = self.keyboard_manager.get_admin_keyboard()
        
        update.message.reply_text(
            admin_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        return ADMIN_PANEL
    
    def handle_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = query.from_user.id
        
        try:
            if data == "main_menu":
                return self.show_main_menu(update, context)
            
            elif data == "create_chat":
                return self.show_create_chat_menu(update, context)
            
            elif data == "chat_list":
                return self.show_chat_list(update, context)
            
            elif data.startswith("create_"):
                return self.handle_create_chat(update, context, data)
            
            elif data.startswith("scenario_"):
                return self.handle_scenario_selection(update, context, data)
            
            elif data.startswith("empathy_"):
                return self.handle_empathy_selection(update, context, data)
            
            elif data.startswith("length_"):
                return self.handle_length_selection(update, context, data)
            
            elif data.startswith("trait_"):
                return self.handle_personality_selection(update, context, data)
            
            elif data.startswith("chat_"):
                return self.handle_chat_selection(update, context, data)
            
            elif data.startswith("open_chat_"):
                return self.open_chat(update, context, data)
            
            elif data.startswith("delete_chat_"):
                return self.handle_delete_chat(update, context, data)
            
            elif data.startswith("confirm_"):
                return self.handle_confirmation(update, context, data)
            
            elif data.startswith("cancel_"):
                return self.handle_cancellation(update, context, data)
            
            elif data.startswith("admin_"):
                return self.handle_admin_action(update, context, data)
            
            else:
                query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return MAIN_MENU
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return MAIN_MENU
    
    def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if user_id in self.user_states and 'active_chat_id' in self.user_states[user_id]:
            chat_id = self.user_states[user_id]['active_chat_id']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_gender = "female" if update.effective_user.first_name and update.effective_user.first_name.endswith(('–∞', '—è')) else "male"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = self.chat_manager.process_message(chat_id, user_id, text, user_gender)
            
            if response:
                keyboard = self.keyboard_manager.get_chat_interface_keyboard(chat_id)
                update.message.reply_text(response, reply_markup=keyboard)
            else:
                update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
            return CHAT_INTERFACE
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.",
                reply_markup=self.keyboard_manager.get_main_menu_keyboard()
            )
            return MAIN_MENU
    
    def show_main_menu(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = "üè® **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = self.keyboard_manager.get_main_menu_keyboard()
        
        if update.callback_query:
            update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        else:
            update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        
        return MAIN_MENU
    
    def show_create_chat_menu(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        text = "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–∑–¥–∞–Ω–∏—è:"
        keyboard = self.keyboard_manager.get_create_chat_keyboard()
        
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CREATE_CHAT
    
    def show_chat_list(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        user_id = update.callback_query.from_user.id
        chats = self.chat_manager.get_user_chats(user_id)
        
        if not chats:
            text = "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!"
        else:
            text = f"üí¨ **–í–∞—à–∏ —á–∞—Ç—ã** ({len(chats)}):\n\n"
            for i, chat in enumerate(chats[:5], 1):
                text += f"{i}. **{chat['title']}**\n"
                text += f"   üìÖ {chat['created_at'][:10]}\n"
                text += f"   üìù {chat['summary']}\n\n"
        
        keyboard = self.keyboard_manager.get_chat_list_keyboard(chats)
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CHAT_LIST
    
    def handle_create_chat(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        user_id = update.callback_query.from_user.id
        
        if data == "create_simple":
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_id = self.chat_manager.create_chat(
                user_id=user_id,
                title="–ù–æ–≤—ã–π —á–∞—Ç",
                scenario="anime"
            )
            
            if chat_id:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
                if user_id not in self.user_states:
                    self.user_states[user_id] = {}
                self.user_states[user_id]['active_chat_id'] = chat_id
                
                text = (
                    "‚úÖ **–ß–∞—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –û–¥–∞–Ω–Ω–æ–π. "
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ."
                )
                
                keyboard = self.keyboard_manager.get_chat_interface_keyboard(chat_id)
                update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
                return CHAT_INTERFACE
            else:
                update.callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")
                return self.show_create_chat_menu(update, context)
        
        elif data == "create_with_settings":
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            text = "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:**\n\n–ö–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –û–¥–∞–Ω–Ω—ã."
            keyboard = self.keyboard_manager.get_scenario_keyboard()
            update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            return CREATE_WITH_SETTINGS
        
        return MAIN_MENU
    
    def handle_scenario_selection(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        scenario = data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        user_id = update.callback_query.from_user.id
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['temp_scenario'] = scenario
        
        text = "üíù **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏:**\n\n–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–ø–ª–æ –û–¥–∞–Ω–Ω–∞ –±—É–¥–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏."
        keyboard = self.keyboard_manager.get_empathy_keyboard()
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return EMPATHY_SELECTION
    
    def handle_empathy_selection(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —ç–º–ø–∞—Ç–∏–∏"""
        empathy_level = int(data.split("_")[1])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —ç–º–ø–∞—Ç–∏–∏
        user_id = update.callback_query.from_user.id
        self.user_states[user_id]['temp_empathy'] = empathy_level
        
        text = "üìè **–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤:**\n\n–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä–æ–±–Ω–æ –û–¥–∞–Ω–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å."
        keyboard = self.keyboard_manager.get_response_length_keyboard()
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return LENGTH_SELECTION
    
    def handle_length_selection(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞"""
        length = data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        user_id = update.callback_query.from_user.id
        self.user_states[user_id]['temp_length'] = length
        
        text = "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —á–µ—Ä—Ç—ã:**\n\n–≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –æ—Å–æ–±—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫ –ø–æ–≤–µ–¥–µ–Ω–∏—é –û–¥–∞–Ω–Ω—ã."
        keyboard = self.keyboard_manager.get_personality_traits_keyboard()
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return PERSONALITY_SELECTION
    
    def handle_personality_selection(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö —á–µ—Ä—Ç"""
        trait = data.split("_")[1]
        
        user_id = update.callback_query.from_user.id
        user_state = self.user_states.get(user_id, {})
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings = {
            'empathy_level': user_state.get('temp_empathy', 50),
            'response_length': user_state.get('temp_length', 'medium'),
            'personality_traits': [trait]
        }
        
        chat_id = self.chat_manager.create_chat(
            user_id=user_id,
            title="–ù–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
            scenario=user_state.get('temp_scenario', 'anime'),
            settings=settings
        )
        
        if chat_id:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
            self.user_states[user_id]['active_chat_id'] = chat_id
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for key in ['temp_scenario', 'temp_empathy', 'temp_length']:
                if key in self.user_states[user_id]:
                    del self.user_states[user_id][key]
            
            text = (
                "‚úÖ **–ß–∞—Ç —Å–æ–∑–¥–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!**\n\n"
                f"‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π: {user_state.get('temp_scenario', 'anime')}\n"
                f"‚Ä¢ –≠–º–ø–∞—Ç–∏—è: {user_state.get('temp_empathy', 50)}%\n"
                f"‚Ä¢ –î–ª–∏–Ω–∞: {user_state.get('temp_length', 'medium')}\n"
                f"‚Ä¢ –ß–µ—Ä—Ç–∞: {trait}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –û–¥–∞–Ω–Ω–æ–π!"
            )
            
            keyboard = self.keyboard_manager.get_chat_interface_keyboard(chat_id)
            update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            return CHAT_INTERFACE
        else:
            update.callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")
            return self.show_create_chat_menu(update, context)
    
    def handle_chat_selection(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        chat_id = int(data.split("_")[1])
        user_id = update.callback_query.from_user.id
        
        chat_info = self.chat_manager.get_chat_info(chat_id)
        if not chat_info:
            update.callback_query.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return self.show_chat_list(update, context)
        
        text = (
            f"üí¨ **{chat_info['title']}**\n\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {chat_info['created_at'][:10]}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {chat_info['summary']}\n"
            f"üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π: {chat_info['scenario']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = self.keyboard_manager.get_chat_detail_keyboard(chat_id)
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CHAT_DETAIL
    
    def open_chat(self, update: Update, context, data):
        """–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è"""
        chat_id = int(data.split("_")[1])
        user_id = update.callback_query.from_user.id
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['active_chat_id'] = chat_id
        
        chat_info = self.chat_manager.get_chat_info(chat_id)
        
        text = (
            f"üí¨ **{chat_info['title']}**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –û–¥–∞–Ω–Ω–æ–π. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        )
        
        keyboard = self.keyboard_manager.get_chat_interface_keyboard(chat_id)
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CHAT_INTERFACE
    
    def handle_delete_chat(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        chat_id = int(data.split("_")[1])
        
        text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        keyboard = self.keyboard_manager.get_confirm_keyboard("delete", chat_id)
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CHAT_DETAIL
    
    def handle_confirmation(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        parts = data.split("_")
        action = parts[1]
        chat_id = int(parts[2])
        
        if action == "delete":
            success = self.chat_manager.delete_chat(chat_id)
            if success:
                text = "‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"
            
            keyboard = self.keyboard_manager.get_main_menu_keyboard()
            update.callback_query.edit_message_text(text, reply_markup=keyboard)
            return MAIN_MENU
        
        return MAIN_MENU
    
    def handle_cancellation(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        update.callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return self.show_main_menu(update, context)
    
    def handle_admin_action(self, update: Update, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        action = data.split("_")[1]
        
        if action == "stats":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = len(self.db.get_all_users())
            total_chats = len(self.db.get_all_chats())
            total_messages = len(self.db.get_all_messages())
            
            text = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üí¨ –ß–∞—Ç–æ–≤: {total_chats}\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            )
        else:
            text = "üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        keyboard = self.keyboard_manager.get_admin_keyboard()
        update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return ADMIN_PANEL
    
    def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞...")
        self.updater.start_polling()
        self.updater.idle()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = OdannaBot()
    bot.run()

if __name__ == '__main__':
    main()