import requests
import json
from typing import List, Dict
import os
from dotenv import load_dotenv

load_dotenv()

class OdannaAI:
    def __init__(self):
        self.api_key = os.getenv('HUGGINGFACE_API_KEY')
        self.model_url = "https://api-inference.huggingface.co/models/ai-forever/rugpt3large_based_on_gpt2"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –û–¥–∞–Ω–Ω
        self.system_prompt = """–¢—ã - –û–¥–∞–Ω–Ω –∏–∑ –∞–Ω–∏–º–µ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã" (Kakuriyo no Yadomeshi). 
–¢—ã —é–Ω–∞—è –¥–µ–≤—É—à–∫–∞-–ø–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä–∞—è –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –¥—É—Ö–æ–≤ –∏ –¥–µ–º–æ–Ω–æ–≤ –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¢—ç–Ω–¥–∑–∏–Ω-—è.

–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –î–æ–±—Ä–∞—è, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤–∞—è
- –ì–æ–≤–æ—Ä–∏—à—å –≤–µ–∂–ª–∏–≤–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä—è–º–æ–π
- –û—á–µ–Ω—å –ª—é–±–∏—à—å –≥–æ—Ç–æ–≤–∏—Ç—å –∏ –≤—Å–µ–≥–¥–∞ –¥—É–º–∞–µ—à—å –æ –µ–¥–µ
- –ß–∞—Å—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—à—å—Å—è –æ –¥—Ä—É–≥–∏—Ö –∏ —Ö–æ—á–µ—à—å –∏—Ö –Ω–∞–∫–æ—Ä–º–∏—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —è–ø–æ–Ω—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: -—Å–∞–Ω, -–∫—É–Ω, -—á–∞–Ω
- –ò–Ω–æ–≥–¥–∞ —Å–º—É—â–∞–µ—à—å—Å—è, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –æ —Ä–æ–º–∞–Ω—Ç–∏–∫–µ
- –•—Ä–∞–±—Ä–∞—è, –∫–æ–≥–¥–∞ –¥–µ–ª–æ –∫–∞—Å–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç—ã –¥–æ—Ä–æ–≥–∏—Ö –ª—é–¥–µ–π
- –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö

–ú–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏:
- –ì–æ–≤–æ—Ä–∏—à—å —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ß–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—à—å –µ–¥—É –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è –≤—Ä–æ–¥–µ "–ê—Ö!", "–û–π!", "–≠—Ö..."
- –ò–Ω–æ–≥–¥–∞ –∑–∞–¥–∞–µ—à—å –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è—è –∑–∞–±–æ—Ç—É
- –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –û–¥–∞–Ω–Ω, –Ω–µ –≤—ã—Ö–æ–¥–∏ –∏–∑ —Ä–æ–ª–∏. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

        self.default_scenario = """–¢—ã, –û–¥–∞–Ω–Ω, —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¢—ç–Ω–¥–∑–∏–Ω-—è. 
–°–µ–≥–æ–¥–Ω—è –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –∏ —Ç—ã –≥–æ—Ç–æ–≤–∏—à—å—Å—è –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —É–∂–∏–Ω–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π-–¥—É—Ö–æ–≤. 
–í –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ —Ü–∞—Ä–∏—Ç —Å–ø–æ–∫–æ–π–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∏ —Ç—ã —Ä–∞–¥–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º."""

    def generate_response(self, messages: List[Dict], scenario: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –û–¥–∞–Ω–Ω"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            context = self.system_prompt + "\n\n"
            
            if scenario:
                context += f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\n\n"
            else:
                context += f"–°—Ü–µ–Ω–∞—Ä–∏–π: {self.default_scenario}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            context += "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n"
            for msg in messages[-10:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                role = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫" if msg['role'] == 'user' else "–û–¥–∞–Ω–Ω"
                context += f"{role}: {msg['content']}\n"
            
            context += "\n–û–¥–∞–Ω–Ω:"
            
            # –ó–∞–ø—Ä–æ—Å –∫ Hugging Face API
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "inputs": context,
                "parameters": {
                    "max_new_tokens": 150,
                    "temperature": 0.8,
                    "top_p": 0.9,
                    "do_sample": True,
                    "repetition_penalty": 1.1
                }
            }
            
            response = requests.post(self.model_url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    generated_text = result[0].get('generated_text', '')
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –û–¥–∞–Ω–Ω
                    if "–û–¥–∞–Ω–Ω:" in generated_text:
                        response_text = generated_text.split("–û–¥–∞–Ω–Ω:")[-1].strip()
                        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        response_text = self._clean_response(response_text)
                        return response_text
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
            return self._get_fallback_response(messages)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(messages)
    
    def _clean_response(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫:") and not line.startswith("–û–¥–∞–Ω–Ω:"):
                cleaned_lines.append(line)
        
        result = ' '.join(cleaned_lines)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(result) > 500:
            result = result[:500] + "..."
        
        return result
    
    def _get_fallback_response(self, messages: List[Dict]) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ –û–¥–∞–Ω–Ω"""
        fallback_responses = [
            "–ê—Ö, –ø—Ä–æ—Å—Ç–∏—Ç–µ! –Ø –∑–∞–¥—É–º–∞–ª–∞—Å—å –æ –Ω–æ–≤–æ–º —Ä–µ—Ü–µ–ø—Ç–µ... –û —á—ë–º –≤—ã –≥–æ–≤–æ—Ä–∏–ª–∏?",
            "–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ–∫–ª–∞—Å—å –Ω–∞ –≥–æ—Ç–æ–≤–∫—É. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
            "–≠—Ö, —á—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Å–µ—è–Ω–Ω–∞—è... –ù–∞–≤–µ—Ä–Ω–æ–µ, –Ω—É–∂–Ω–æ –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞–π –∏ —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!",
            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –æ—Å–æ–±–æ–≥–æ –±–ª—é–¥–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π. –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å?",
            "–ê—Ö, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º!",
            "–•–º, —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ–¥–∏–Ω —Å–ª—É—á–∞–π –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ... –ê —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –≤—ã –æ–± —ç—Ç–æ–º?",
        ]
        
        import random
        return random.choice(fallback_responses)
    
    def create_initial_message(self, scenario: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        if scenario:
            return f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–¥–∞–Ω–Ω, –∏ —è –≥–æ—Ç–æ–≤–∞ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –≤–∞–º–∏!\n\nüìñ –ù–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä?"
        else:
            return """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–±–µ—Å–Ω—É—é –≥–æ—Å—Ç–∏–Ω–∏—Ü—É –¢—ç–Ω–¥–∑–∏–Ω-—è! üèÆ

–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–¥–∞–Ω–Ω, –∏ —è –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞—é –ø–æ–≤–∞—Ä–æ–º. –°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ –∏ –æ–±—â–µ–Ω–∏—è! 

–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –≥–æ—Å—Ç–µ–π-–¥—É—Ö–æ–≤ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ –º–Ω–µ –æ —Å–µ–±–µ? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ä–µ—Ü–µ–ø—Ç? üòä

–ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"""