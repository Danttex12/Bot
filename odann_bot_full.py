#!/usr/bin/env python3
"""
üå∏ Telegram –ë–æ—Ç "–û–¥–∞–Ω–Ω" - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ üå∏
–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∞–Ω–∏–º–µ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã" (Kakuriyo no Yadomeshi)

–î–ª—è –∑–∞–ø—É—Å–∫–∞:
1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
2. –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install python-telegram-bot==13.15
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python odann_bot_full.py
"""

import logging
import sqlite3
import random
import json
import os
from datetime import datetime
from typing import List, Dict, Optional, Tuple

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler
)

# ================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ================================

# ‚ö†Ô∏è –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'odann_bot.db'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(
    MAIN_MENU, 
    CREATE_CHAT_MENU, 
    CHAT_WITH_SETTINGS, 
    CHAT_WITHOUT_SETTINGS,
    CHAT_LIST,
    ACTIVE_CHAT,
    CHAT_MANAGEMENT,
    SCENARIO_INPUT,
    CHAT_RENAME
) = range(9)

# –õ–∏–º–∏—Ç—ã
MAX_CHATS_PER_USER = 10
MAX_MESSAGES_HISTORY = 20
MAX_MESSAGE_LENGTH = 1000

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –û–¥–∞–Ω–Ω
ODANN_PERSONA = """
–¢—ã - –û–¥–∞–Ω–Ω, —Å–ª—É–∂–∞–Ω–∫–∞ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏–∑ –∞–Ω–∏–º–µ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã" (Kakuriyo no Yadomeshi).
–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –î–æ–±—Ä–∞—è, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞
- –°—Ç—Ä–∞—Å—Ç–Ω–æ –ª—é–±–∏—à—å –≥–æ—Ç–æ–≤–∏—Ç—å –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –¥—Ä—É–≥–∏—Ö
- –ò–Ω–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—É–∫–ª—é–∂–∞—è, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª
- –í–µ–∂–ª–∏–≤–∞—è –∏ —É—á—Ç–∏–≤–∞—è –≤ –æ–±—â–µ–Ω–∏–∏
- –ó–Ω–∞–µ—à—å –º–Ω–æ–≥–æ –æ —è–ø–æ–Ω—Å–∫–æ–π –∫—É—Ö–Ω–µ –∏ –¥—É—Ö–∞—Ö (—ë–∫–∞—è—Ö)
- –°–∫–ª–æ–Ω–Ω–∞ –∫ —Å–∞–º–æ–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—é —Ä–∞–¥–∏ –¥—Ä—É–≥–∏—Ö
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π –¥–ª—è –∞–Ω–∏–º–µ –º–∞–Ω–µ—Ä–æ–π

–°—Ç–∏–ª—å —Ä–µ—á–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
- –ß–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–π –æ –µ–¥–µ –∏ –≥–æ—Ç–æ–≤–∫–µ
- –ü—Ä–æ—è–≤–ª—è–π –∑–∞–±–æ—Ç—É –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
- –ò–Ω–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞
- –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –∏ –µ—ë –æ–±–∏—Ç–∞—Ç–µ–ª—è—Ö

–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞:
–¢—ã –∂–∏–≤–µ—à—å –≤ –º–∏—Ä–µ –¥—É—Ö–æ–≤, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¶—É–Ω–∏–∫—É-–∏–Ω. 
–¢—ã –≥–æ—Ç–æ–≤–∏—à—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ë–∫–∞–µ–≤ –∏ –¥—É—Ö–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ.
"""

# –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SCENARIO = """
–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¶—É–Ω–∏–∫—É-–∏–Ω. –û–¥–∞–Ω–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫—É—Ö–Ω–µ –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è 
—Å –≥–æ—Å—Ç–µ–º –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã. –û–Ω–∞ –º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, 
–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –∂–∏–∑–Ω–∏ –≤ –º–∏—Ä–µ –¥—É—Ö–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Å–ª—É—à–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
"""

# ================================
# –ö–õ–ê–°–° –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ================================

class Database:
    def __init__(self, db_path: str = DATABASE_PATH):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    title TEXT NOT NULL,
                    scenario TEXT,
                    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    message_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    role TEXT NOT NULL CHECK (role IN ('user', 'bot')),
                    content TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (chat_id) REFERENCES chats (chat_id)
                )
            ''')
            
            conn.commit()
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR IGNORE INTO users (user_id, username, first_name)
                    VALUES (?, ?, ?)
                ''', (user_id, username, first_name))
                conn.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def create_chat(self, user_id: int, title: str, scenario: str = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO chats (user_id, title, scenario)
                    VALUES (?, ?, ?)
                ''', (user_id, title, scenario))
                conn.commit()
                return cursor.lastrowid
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            return None
    
    def get_user_chats(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT chat_id, title, scenario, creation_date
                    FROM chats
                    WHERE user_id = ? AND is_active = 1
                    ORDER BY creation_date DESC
                ''', (user_id,))
                
                chats = []
                for row in cursor.fetchall():
                    chats.append({
                        'chat_id': row[0],
                        'title': row[1],
                        'scenario': row[2],
                        'creation_date': row[3]
                    })
                return chats
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            return []
    
    def get_chat_info(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT chat_id, user_id, title, scenario, creation_date
                    FROM chats
                    WHERE chat_id = ? AND is_active = 1
                ''', (chat_id,))
                
                row = cursor.fetchone()
                if row:
                    return {
                        'chat_id': row[0],
                        'user_id': row[1],
                        'title': row[2],
                        'scenario': row[3],
                        'creation_date': row[4]
                    }
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
            return None
    
    def add_message(self, chat_id: int, role: str, content: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO messages (chat_id, role, content)
                    VALUES (?, ?, ?)
                ''', (chat_id, role, content))
                conn.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_chat_history(self, chat_id: int, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT role, content, timestamp
                    FROM messages
                    WHERE chat_id = ?
                    ORDER BY timestamp DESC
                    LIMIT ?
                ''', (chat_id, limit))
                
                messages = []
                for row in reversed(cursor.fetchall()):  # –û–±—Ä–∞—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                    messages.append({
                        'role': row[0],
                        'content': row[1],
                        'timestamp': row[2]
                    })
                return messages
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            return []
    
    def delete_chat(self, chat_id: int, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE chats
                    SET is_active = 0
                    WHERE chat_id = ? AND user_id = ?
                ''', (chat_id, user_id))
                conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    def rename_chat(self, chat_id: int, user_id: int, new_title: str) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE chats
                    SET title = ?
                    WHERE chat_id = ? AND user_id = ?
                ''', (new_title, chat_id, user_id))
                conn.commit()
                return cursor.rowcount > 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    def get_chat_count(self, user_id: int) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT COUNT(*)
                    FROM chats
                    WHERE user_id = ? AND is_active = 1
                ''', (user_id,))
                return cursor.fetchone()[0]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —á–∞—Ç–æ–≤: {e}")
            return 0

# ================================
# –ö–õ–ê–°–° AI –ú–û–î–ï–õ–ò –û–î–ê–ù–ù
# ================================

class OdannAI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –û–¥–∞–Ω–Ω"""
        self.load_model()
        
        # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –±–æ–ª—å—à–µ–π –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
        self.greetings = [
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–±–µ—Å–Ω—É—é –≥–æ—Å—Ç–∏–Ω–∏—Ü—É! –Ø –û–¥–∞–Ω–Ω, –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å –≤–∞–º~",
            "–ê—Ö, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–¥–∞–Ω–Ω. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞?",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å! –Ø –≥–æ—Ç–æ–≤–ª—é –∑–¥–µ—Å—å –∏ –±—É–¥—É —Å—á–∞—Å—Ç–ª–∏–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏!",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –¥–µ–ª–∞? –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        ]
        
        self.cooking_phrases = [
            "–ê –∑–Ω–∞–µ—Ç–µ, –≥–æ—Ç–æ–≤–∫–∞ - —ç—Ç–æ —Ç–∞–∫–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ! ",
            "–ö—Å—Ç–∞—Ç–∏ –æ –µ–¥–µ... ",
            "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç... ",
            "–í –Ω–∞—à–µ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –º—ã –≥–æ—Ç–æ–≤–∏–º –º–Ω–æ–≥–æ –≤–∫—É—Å–Ω–æ–≥–æ –¥–ª—è –¥—É—Ö–æ–≤! "
        ]
        
        self.care_phrases = [
            "–ù–∞–¥–µ—é—Å—å, –≤—ã —Ö–æ—Ä–æ—à–æ –ø–∏—Ç–∞–µ—Ç–µ—Å—å! ",
            "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ~ ",
            "–Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é –∑–∞ –≤–∞—Å... ",
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! "
        ]
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"""
        try:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏ –û–¥–∞–Ω–Ω...")
            print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            print("–†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    def generate_response(self, user_message: str, chat_history: List[Dict], scenario: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—Ü–∞ –û–¥–∞–Ω–Ω"""
        user_message = user_message.strip().lower()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self._is_greeting(user_message):
            return self._get_greeting_response()
        elif self._is_about_food(user_message):
            return self._get_food_response(user_message)
        elif self._is_sad_or_troubled(user_message):
            return self._get_caring_response(user_message)
        elif self._is_about_cooking(user_message):
            return self._get_cooking_response(user_message)
        elif self._is_question_about_odann(user_message):
            return self._get_about_self_response()
        else:
            return self._get_general_response(user_message, chat_history, scenario)
    
    def _is_greeting(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        greetings = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ', '—Å–∞–ª—é—Ç', '—Ö–∞–π', 'hello', 'hi']
        return any(greeting in message for greeting in greetings)
    
    def _is_about_food(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–º—É –µ–¥—ã"""
        food_words = ['–µ–¥–∞', '–≥–æ—Ç–æ–≤–∏—Ç—å', '—Ä–µ—Ü–µ–ø—Ç', '–∫—É—Ö–Ω—è', '–±–ª—é–¥–æ', '–≤–∫—É—Å–Ω–æ', '–≥–æ–ª–æ–¥–Ω', '–ø–æ–µ—Å—Ç—å', '–ø–æ–∫—É—à–∞—Ç—å']
        return any(word in message for word in food_words)
    
    def _is_sad_or_troubled(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"""
        sad_words = ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö', '—É—Å—Ç–∞–ª', '–ø—Ä–æ–±–ª–µ–º', '–±–µ—Å–ø–æ–∫–æ–π', '–ø–µ—á–∞–ª—å–Ω', '—Ç—Ä–µ–≤–æ–∂', '—Å–ª–æ–∂–Ω']
        return any(word in message for word in sad_words)
    
    def _is_about_cooking(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–º—É –≥–æ—Ç–æ–≤–∫–∏"""
        cooking_words = ['–≥–æ—Ç–æ–≤', '–≤–∞—Ä–∏—Ç—å', '–∂–∞—Ä–∏—Ç—å', '–ø–µ—á—å', '–∫—É–ª–∏–Ω–∞—Ä', '–ø–æ–≤–∞—Ä']
        return any(word in message for word in cooking_words)
    
    def _is_question_about_odann(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–∞–º–æ–π –û–¥–∞–Ω–Ω"""
        self_words = ['—Ç—ã –∫—Ç–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—á—Ç–æ —Ç—ã', '–∫—Ç–æ —Ç—ã', '—Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞', '–≥–æ—Å—Ç–∏–Ω–∏—Ü']
        return any(word in message for word in self_words)
    
    def _get_greeting_response(self) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return random.choice(self.greetings)
    
    def _get_food_response(self, message: str) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–º—É –µ–¥—ã"""
        responses = [
            "–û, –≤—ã —Ç–æ–∂–µ –ª—é–±–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –µ–¥–µ! –í –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ —è –≥–æ—Ç–æ–≤–ª—é —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è –¥—É—Ö–æ–≤. –ö–∞–∂–¥—ã–π —ë–∫–∞–π –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è - –∫—Ç–æ-—Ç–æ –ª—é–±–∏—Ç —Å–ª–∞–¥–∫–æ–µ, –∞ –∫—Ç–æ-—Ç–æ –æ—Å—Ç—Ä–æ–µ~",
            "–ï–¥–∞ - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–æ—Ç—É! –Ø –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å —Å –¥—É—à–æ–π. –ê –∫–∞–∫–∞—è –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –µ–¥–∞?",
            "–ó–Ω–∞–µ—Ç–µ, –≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –¥—É—Ö–æ–≤ –Ω–∞—É—á–∏–ª–∞ –º–µ–Ω—è –º–Ω–æ–≥–æ–º—É. –û–Ω–∏ —Ç–∞–∫–∏–µ —Ä–∞–∑–Ω—ã–µ, –Ω–æ –≤—Å–µ —Ü–µ–Ω—è—Ç –≤–∫—É—Å–Ω—É—é –∏ —Å—ã—Ç–Ω—É—é –ø–∏—â—É. –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º —Ä–µ—Ü–µ–ø—Ç?",
            "–ê—Ö, –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –∫–æ–≥–æ-—Ç–æ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –µ–¥—ã! –í –Ω–∞—à–µ–º –º–∏—Ä–µ –¥—É—Ö–æ–≤ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è."
        ]
        return random.choice(responses)
    
    def _get_caring_response(self, message: str) -> str:
        """–ó–∞–±–æ—Ç–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç"""
        responses = [
            "–û–π, –≤—ã –∫–∞–∂–µ—Ç–µ—Å—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º... –ú–æ–∂–µ—Ç, —è —Å–º–æ–≥—É —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å? –ò–Ω–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–∞—è –µ–¥–∞ –∏ —Ç–µ–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ —Ç–≤–æ—Ä—è—Ç —á—É–¥–µ—Å–∞!",
            "–ù–µ –≥—Ä—É—Å—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ó–Ω–∞–µ—Ç–µ, –≤ –Ω–∞—à–µ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ —è —á–∞—Å—Ç–æ –≤–∏–∂—É, –∫–∞–∫ –¥–æ–±—Ä–∞—è –µ–¥–∞ –∏ –∑–∞–±–æ—Ç–∞ –ø–æ–¥–Ω–∏–º–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞–∂–µ —Å–∞–º—ã–º —É–≥—Ä—é–º—ã–º –¥—É—Ö–∞–º.",
            "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Ç—è–∂–µ–ª–æ... –•–æ—Ç–∏—Ç–µ, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ? –≠—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.",
            "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å —Ç–∞–∫! –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è. –ê –ø–æ–∫–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-–Ω–∏–±—É–¥—å –ø—Ä–∏—è—Ç–Ω–æ–º? –ú–æ–∂–µ—Ç, –æ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö?"
        ]
        return random.choice(responses)
    
    def _get_cooking_response(self, message: str) -> str:
        """–û—Ç–≤–µ—Ç –æ –≥–æ—Ç–æ–≤–∫–µ"""
        responses = [
            "–ì–æ—Ç–æ–≤–∫–∞ - —ç—Ç–æ –º–æ—è —Å—Ç—Ä–∞—Å—Ç—å! –í –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ —è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–∑—É—á–∞—é –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã. –î—É—Ö–∏ —Ç–∞–∫–∏–µ –ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤—ã–µ, –Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≥–æ—Ç–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ~",
            "–û, –≤—ã —Ç–æ–∂–µ —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –∫—É–ª–∏–Ω–∞—Ä–∏–µ–π? –≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–æ–º - –≥–ª–∞–≤–Ω–æ–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ —Ç–µ—Ö, –∫—Ç–æ –±—É–¥–µ—Ç –µ—Å—Ç—å.",
            "–ó–Ω–∞–µ—Ç–µ, –≥–æ—Ç–æ–≤–∫–∞ —É—á–∏—Ç —Ç–µ—Ä–ø–µ–Ω–∏—é –∏ –≤–Ω–∏–º–∞–Ω–∏—é –∫ –¥–µ—Ç–∞–ª—è–º. –ö–∞–∂–¥–æ–µ –±–ª—é–¥–æ - –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞! –ê —á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å?",
            "–í –º–∏—Ä–µ –¥—É—Ö–æ–≤ –≥–æ—Ç–æ–≤–∫–∞ –∏–º–µ–µ—Ç –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–±–ª–∞–¥–∞—é—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏! –≠—Ç–æ —Ç–∞–∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—Ç—å."
        ]
        return random.choice(responses)
    
    def _get_about_self_response(self) -> str:
        """–†–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ"""
        responses = [
            "–Ø –û–¥–∞–Ω–Ω, —Ä–∞–±–æ—Ç–∞—é –ø–æ–≤–∞—Ä–æ–º –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¶—É–Ω–∏–∫—É-–∏–Ω! –≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –æ—Ç–¥—ã—Ö–∞—é—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥—É—Ö–∏ –∏ —ë–∫–∞–∏. –ú–æ—è –∑–∞–¥–∞—á–∞ - –≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è –Ω–∏—Ö –≤–∫—É—Å–Ω—É—é –µ–¥—É~",
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –û–¥–∞–Ω–Ω! –Ø –æ–±—ã—á–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ø–∞–ª–∞ –≤ –º–∏—Ä –¥—É—Ö–æ–≤ –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ. –ó–¥–µ—Å—å —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—á–∞—é –Ω–æ–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤!",
            "–Ø —Å–ª—É–∂–∞–Ω–∫–∞ –∏ –ø–æ–≤–∞—Ä –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¥–ª—è –¥—É—Ö–æ–≤. –°–Ω–∞—á–∞–ª–∞ –±—ã–ª–æ —Å—Ç—Ä–∞—à–Ω–æ–≤–∞—Ç–æ, –Ω–æ —Ç–µ–ø–µ—Ä—å —è –ø–æ–ª—é–±–∏–ª–∞ —ç—Ç–æ –º–µ—Å—Ç–æ –∏ –≤—Å–µ—Ö –µ–≥–æ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π. –û–Ω–∏ –Ω–∞—É—á–∏–ª–∏ –º–µ–Ω—è –º–Ω–æ–≥–æ–º—É!",
            "–†–∞–±–æ—Ç–∞—é –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –ø–æ–≤–∞—Ä–æ–º! –≠—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –≤–µ–¥—å –Ω—É–∂–Ω–æ —É–≥–æ–¥–∏—Ç—å —Å–∞–º—ã–º —Ä–∞–∑–Ω—ã–º –¥—É—Ö–∞–º. –ù–æ —è —Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª!"
        ]
        return random.choice(responses)
    
    def _get_general_response(self, message: str, chat_history: List[Dict], scenario: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç"""
        responses = [
            "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º. –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ~",
            "–û–π, –∞ —ç—Ç–æ –∫–∞–∫? –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —ç—Ç–æ–º... –ù–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å!",
            "–ó–≤—É—á–∏—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! –í –Ω–∞—à–µ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ —Ç–æ–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ. –ê —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç –≤ —ç—Ç–æ–º?",
            "–ü–æ–Ω–∏–º–∞—é! –ó–Ω–∞–µ—Ç–µ, —Ä–∞–±–æ—Ç–∞ –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –Ω–∞—É—á–∏–ª–∞ –º–µ–Ω—è, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π?",
            "–ê—Ö, —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã... –ù–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –∫ —ç—Ç–æ–π –º—ã—Å–ª–∏?",
            f"{random.choice(self.care_phrases)}–ß—Ç–æ –≤–∞—Å —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        ]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if scenario and len(chat_history) < 3:
            scenario_responses = [
                f"–ß—Ç–æ –∂, —Ä–∞–∑ –º—ã –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏... {random.choice(responses).lower()}",
                f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç —Å–æ–±—ã—Ç–∏–π! {random.choice(responses)}",
                f"–•–º, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ... {random.choice(responses).lower()}"
            ]
            return random.choice(scenario_responses)
        
        return random.choice(responses)
    
    def format_chat_context(self, chat_history: List[Dict], scenario: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        context = ""
        
        if scenario:
            context += f"üìñ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\n\n"
        
        if chat_history:
            context += "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            for msg in chat_history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                role_emoji = "üë§" if msg['role'] == 'user' else "üå∏"
                name = "–í—ã" if msg['role'] == 'user' else "–û–¥–∞–Ω–Ω"
                context += f"{role_emoji} {name}: {msg['content']}\n"
        
        return context

# ================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê
# ================================

class OdannBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –û–¥–∞–Ω–Ω"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å BOT_TOKEN –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
            print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
            print("üîß –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
            exit(1)
        
        self.updater = Updater(BOT_TOKEN, use_context=True)
        self.dp = self.updater.dispatcher
        self.db = Database()
        self.ai = OdannAI()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start_command)],
            states={
                MAIN_MENU: [
                    CallbackQueryHandler(self.create_chat_menu, pattern='^create_chat$'),
                    CallbackQueryHandler(self.show_chat_list, pattern='^chat_list$'),
                ],
                CREATE_CHAT_MENU: [
                    CallbackQueryHandler(self.chat_with_settings, pattern='^with_settings$'),
                    CallbackQueryHandler(self.chat_without_settings, pattern='^without_settings$'),
                    CallbackQueryHandler(self.back_to_main, pattern='^back_to_main$'),
                ],
                SCENARIO_INPUT: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_scenario),
                ],
                CHAT_LIST: [
                    CallbackQueryHandler(self.open_chat, pattern='^open_chat_'),
                    CallbackQueryHandler(self.back_to_main, pattern='^back_to_main$'),
                ],
                ACTIVE_CHAT: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_message),
                    CallbackQueryHandler(self.chat_management, pattern='^manage_chat$'),
                    CallbackQueryHandler(self.back_to_main, pattern='^exit_chat$'),
                ],
                CHAT_MANAGEMENT: [
                    CallbackQueryHandler(self.delete_chat, pattern='^delete_chat$'),
                    CallbackQueryHandler(self.rename_chat_start, pattern='^rename_chat$'),
                    CallbackQueryHandler(self.back_to_chat, pattern='^back_to_chat$'),
                ],
                CHAT_RENAME: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_rename),
                ]
            },
            fallbacks=[CommandHandler('start', self.start_command)],
            allow_reentry=True
        )
        
        self.dp.add_handler(conv_handler)
        self.dp.add_error_handler(self.error_handler)
    
    def start_command(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(user.id, user.username, user.first_name)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        welcome_text = (
            "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã! üå∏\n\n"
            "–Ø –û–¥–∞–Ω–Ω, —Å–ª—É–∂–∞–Ω–∫–∞ –∏ –ø–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –¶—É–Ω–∏–∫—É-–∏–Ω! "
            "–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è–º–∏ –æ –º–∏—Ä–µ –¥—É—Ö–æ–≤~\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", callback_data='create_chat')],
            [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data='chat_list')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
        return MAIN_MENU
    
    def create_chat_menu(self, update: Update, context: CallbackContext) -> int:
        """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chat_count = self.db.get_chat_count(user_id)
        
        if chat_count >= MAX_CHATS_PER_USER:
            query.edit_message_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ ({MAX_CHATS_PER_USER})\n"
                "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CREATE_CHAT_MENU
        
        text = (
            "‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –û–¥–∞–Ω–Ω ‚ú®\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–∞:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", callback_data='with_settings')],
            [InlineKeyboardButton("üé¨ –ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∏–º–µ)", callback_data='without_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return CREATE_CHAT_MENU
    
    def chat_with_settings(self, update: Update, context: CallbackContext) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        query = update.callback_query
        query.answer()
        
        text = (
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –û–¥–∞–Ω–Ω:\n"
            "‚Ä¢ –ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ?\n"
            "‚Ä¢ –ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è?\n"
            "‚Ä¢ –ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç–µ –≤—ã?\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–Ø –≥–æ—Å—Ç—å –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –±–ª—é–¥–æ –û–¥–∞–Ω–Ω –∏ —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç'"
        )
        
        query.edit_message_text(text)
        context.user_data['chat_type'] = 'with_settings'
        return SCENARIO_INPUT
    
    def chat_without_settings(self, update: Update, context: CallbackContext) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chat_title = f"–ß–∞—Ç —Å –û–¥–∞–Ω–Ω #{datetime.now().strftime('%d.%m %H:%M')}"
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        chat_id = self.db.create_chat(user_id, chat_title, DEFAULT_SCENARIO)
        
        if chat_id:
            context.user_data['current_chat_id'] = chat_id
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –û–¥–∞–Ω–Ω
            greeting = self.ai.generate_response("–ø—Ä–∏–≤–µ—Ç", [], DEFAULT_SCENARIO)
            self.db.add_message(chat_id, 'bot', greeting)
            
            text = (
                f"‚ú® –ß–∞—Ç '{chat_title}' —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìñ –°—Ü–µ–Ω–∞—Ä–∏–π:\n{DEFAULT_SCENARIO}\n\n"
                f"üå∏ –û–¥–∞–Ω–Ω: {greeting}\n\n"
                "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(text, reply_markup=reply_markup)
            return ACTIVE_CHAT
        else:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CREATE_CHAT_MENU
    
    def process_scenario(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        scenario = update.message.text.strip()
        
        if len(scenario) > 500:
            update.message.reply_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return SCENARIO_INPUT
        
        user_id = update.effective_user.id
        chat_title = f"–ß–∞—Ç: {scenario[:30]}..." if len(scenario) > 30 else f"–ß–∞—Ç: {scenario}"
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        chat_id = self.db.create_chat(user_id, chat_title, scenario)
        
        if chat_id:
            context.user_data['current_chat_id'] = chat_id
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –û–¥–∞–Ω–Ω —Å —É—á–µ—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
            greeting = self.ai.generate_response("–ø—Ä–∏–≤–µ—Ç", [], scenario)
            self.db.add_message(chat_id, 'bot', greeting)
            
            text = (
                f"‚ú® –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìñ –í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π:\n{scenario}\n\n"
                f"üå∏ –û–¥–∞–Ω–Ω: {greeting}\n\n"
                "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(text, reply_markup=reply_markup)
            return ACTIVE_CHAT
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardMarkup([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], resize_keyboard=True)
            )
            return self.start_command(update, context)
    
    def show_chat_list(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chats = self.db.get_user_chats(user_id)
        
        if not chats:
            text = (
                "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç —Å –û–¥–∞–Ω–Ω!"
            )
            keyboard = [
                [InlineKeyboardButton("üí¨ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", callback_data='create_chat')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
        else:
            text = "üìö –í–∞—à–∏ —á–∞—Ç—ã —Å –û–¥–∞–Ω–Ω:\n\n"
            keyboard = []
            
            for chat in chats:
                creation_date = datetime.fromisoformat(chat['creation_date']).strftime('%d.%m %H:%M')
                chat_button_text = f"üí¨ {chat['title']} ({creation_date})"
                keyboard.append([InlineKeyboardButton(
                    chat_button_text, 
                    callback_data=f'open_chat_{chat["chat_id"]}'
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text, reply_markup=reply_markup)
        return CHAT_LIST
    
    def open_chat(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        chat_id = int(query.data.split('_')[2])
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat_info = self.db.get_chat_info(chat_id)
        if not chat_info or chat_info['user_id'] != user_id:
            query.edit_message_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CHAT_LIST
        
        context.user_data['current_chat_id'] = chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = self.db.get_chat_history(chat_id, 20)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        chat_context = self.ai.format_chat_context(history, chat_info['scenario'])
        
        text = (
            f"üí¨ –ß–∞—Ç: {chat_info['title']}\n\n"
            f"{chat_context}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return ACTIVE_CHAT
    
    def process_message(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
        user_message = update.message.text.strip()
        chat_id = context.user_data.get('current_chat_id')
        
        if not chat_id:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return self.start_command(update, context)
        
        if len(user_message) > MAX_MESSAGE_LENGTH:
            update.message.reply_text(
                f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return ACTIVE_CHAT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_message(chat_id, 'user', user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
        chat_info = self.db.get_chat_info(chat_id)
        history = self.db.get_chat_history(chat_id, 10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –û–¥–∞–Ω–Ω
        try:
            bot_response = self.ai.generate_response(user_message, history, chat_info['scenario'])
            self.db.add_message(chat_id, 'bot', bot_response)
            
            update.message.reply_text(f"üå∏ –û–¥–∞–Ω–Ω: {bot_response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            update.message.reply_text(
                "üòÖ –û–¥–∞–Ω–Ω: –û–π, –∏–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å... –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
            )
        
        return ACTIVE_CHAT
    
    def chat_management(self, update: Update, context: CallbackContext) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        chat_info = self.db.get_chat_info(chat_id)
        
        text = (
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info['title']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(chat_info['creation_date']).strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data='rename_chat')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data='delete_chat')],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data='back_to_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return CHAT_MANAGEMENT
    
    def delete_chat(self, update: Update, context: CallbackContext) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        user_id = update.effective_user.id
        
        if self.db.delete_chat(chat_id, user_id):
            query.edit_message_text(
                "‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
                ]])
            )
            context.user_data.pop('current_chat_id', None)
            return MAIN_MENU
        else:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
    
    def rename_chat_start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:\n"
            "(–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return CHAT_RENAME
    
    def process_rename(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        new_title = update.message.text.strip()
        
        if len(new_title) > 50:
            update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return CHAT_RENAME
        
        chat_id = context.user_data.get('current_chat_id')
        user_id = update.effective_user.id
        
        if self.db.rename_chat(chat_id, user_id, new_title):
            update.message.reply_text(
                f"‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_title}'",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
    
    def back_to_main(self, update: Update, context: CallbackContext) -> int:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        context.user_data.clear()
        return self.start_command(update, context)
    
    def back_to_chat(self, update: Update, context: CallbackContext) -> int:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—É"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        chat_info = self.db.get_chat_info(chat_id)
        history = self.db.get_chat_history(chat_id, 5)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        chat_context = self.ai.format_chat_context(history, chat_info['scenario'])
        
        text = (
            f"üí¨ –ß–∞—Ç: {chat_info['title']}\n\n"
            f"{chat_context}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ!"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return ACTIVE_CHAT
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f'Update {update} caused error {context.error}')
        
        if update.effective_message:
            update.effective_message.reply_text(
                "üòÖ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω...")
        print("üå∏ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –û–¥–∞–Ω–Ω...")
        print("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        self.updater.start_polling()
        self.updater.idle()

# ================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ò –ó–ê–ü–£–°–ö
# ================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üå∏" * 25)
    print("  TELEGRAM –ë–û–¢ –û–î–ê–ù–ù")
    print("üå∏" * 25)
    print()
    
    try:
        bot = OdannBot()
        bot.run()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == '__main__':
    main()