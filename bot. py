import os
import logging
import json
import random
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    PicklePersistence
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
(
    MAIN_MENU, CITY_SELECTION, VACANCY_SELECTION, 
    QUESTIONNAIRE_AGE, QUESTIONNAIRE_CITY, QUESTIONNAIRE_VACANCY,
    QUESTIONNAIRE_EXPERIENCE, QUESTIONNAIRE_QUESTIONS, QUESTIONNAIRE_CONTACTS,
    TICKET_CREATION, TICKET_MESSAGE, PAYMENT_SELECTION,
    REGISTER_USERNAME, REGISTER_PASSWORD, LOGIN_USERNAME, LOGIN_PASSWORD,
    ADMIN_MAIN, ADMIN_USERS, ADMIN_USER_DETAIL, ADMIN_TICKETS, ADMIN_TICKET_DETAIL,
    ADMIN_QUESTIONNAIRES, ADMIN_QUESTIONNAIRE_DETAIL, ADMIN_BLOCK_USER,
    ADMIN_CHANGE_PASSWORD, ADMIN_STATS
) = range(20)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "8151092470:AAH1b61nRsGaD7g1AgJT9w2YhinHeE_E9wU"
ADMIN_ID = 7130956293
CITIES = ["–°—Ç—É–ø–∏–Ω–æ", "–ú–æ—Å–∫–≤–∞"]

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
TEXTS = {
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    "city": "üèôÔ∏è –ì–æ—Ä–æ–¥",
    "vacancies": "üíº –í–∞–∫–∞–Ω—Å–∏–∏", 
    "questionnaire": "üìù –ê–Ω–∫–µ—Ç–∞",
    "ticket": "üì© –¢–∏–∫–µ—Ç",
    "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
    "payment": "üí∞ –û–ø–ª–∞—Ç–∞",
    "admin_panel": "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
    "notifications": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    "manuals": "üìö –ú–∞–Ω—É–∞–ª—ã",
    "simulation": "üéÆ –°–∏–º—É–ª—è—Ü–∏—è",
    "account": "üë§ –ê–∫–∫–∞—É–Ω—Ç",
    "back": "üîô –ù–∞–∑–∞–¥",
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    "users": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "tickets": "üì© –¢–∏–∫–µ—Ç—ã",
    "questionnaires": "üìù –ê–Ω–∫–µ—Ç—ã",
    "statistics": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "passwords": "üîë –ü–∞—Ä–æ–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π",
    
    # –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
    "error": "‚ùå –û—à–∏–±–∫–∞",
    "access_denied": "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
    "in_development": "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
    "insufficient_funds": "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
    
    # –¢–∏–∫–µ—Ç—ã
    "write": "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
    "add_balance": "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    "block": "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", 
    "unblock": "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    "reply": "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
    "close": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
    "delete": "‚ùå –£–¥–∞–ª–∏—Ç—å",
    
    # –ö–∞–ø—á–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    "captcha_header": "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "captcha_select": "–í—ã–±–µ—Ä–∏—Ç–µ:",
    "captcha_success": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
    "captcha_error": "–û—à–∏–±–∫–∞ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "captcha_blocked": "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 30 –º–∏–Ω—É—Ç.",
    "captcha_wrong": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—ã—Ç–∫–∞",
    
    # –ö–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞
    "select_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
    "select_vacancy": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:",
    "select_payment_vacancy": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    "confirm": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
    "cancel": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
    "confirmation_question": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?",
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    "profile_header": "üë§ –ü—Ä–æ—Ñ–∏–ª—å:",
    "nickname": "‚îú –ù–∏–∫:",
    "balance": "‚îú –ë–∞–ª–∞–Ω—Å:",
    "questionnaire_status": "‚îú –°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã:",
    "role": "‚îî –†–æ–ª—å:",
    "transaction_history": "üí≥ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
    
    # –†–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã
    "user": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "employee": "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫",  
    "not_filled": "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
    "under_review": "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
    "approved": "–æ–¥–æ–±—Ä–µ–Ω–∞",
    "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    "active": "–∞–∫—Ç–∏–≤–µ–Ω",
    "blocked": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∫–∏
    "user_detail_id": "‚îú ID:",
    "user_detail_status": "‚îú –°—Ç–∞—Ç—É—Å:",
    "user_detail_balance": "‚îú –ë–∞–ª–∞–Ω—Å:",
    "user_detail_role": "‚îú –†–æ–ª—å:",
    "user_detail_questionnaire": "‚îî –ê–Ω–∫–µ—Ç–∞:",
    "questionnaire_detail": "üìù –ê–Ω–∫–µ—Ç–∞:",
    "age": "‚îú –í–æ–∑—Ä–∞—Å—Ç:",
    "city_work": "‚îú –ì–æ—Ä–æ–¥:",
    "experience": "‚îú –û–ø—ã—Ç:",
    "contacts": "‚îî –ö–æ–Ω—Ç–∞–∫—Ç—ã:",
    
    # –¢–∏–∫–µ—Ç—ã –∞–¥–º–∏–Ω
    "ticket_list": "üì© –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤:",
    "ticket_detail_user": "‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:",
    "ticket_detail_status": "‚îú –°—Ç–∞—Ç—É—Å:",
    "ticket_detail_created": "‚îî –°–æ–∑–¥–∞–Ω:",
    "message_history": "üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:",
    "admin_sender": "üëë –ê–¥–º–∏–Ω",
    "user_sender": "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "ticket_opened": "–æ—Ç–∫—Ä—ã—Ç",
    "ticket_closed": "–∑–∞–∫—Ä—ã—Ç",
    
    # –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "ticket_not_found": "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "reply_sent": "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
    "enter_reply": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
    "function_in_development": "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    "no_notifications": "üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    "new_notifications": "üîî –ù–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
    "new_ticket_reply": "üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É",
    "questionnaire_sent": "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
    "questionnaire_cancelled": "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ",
    "ticket_created": "‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!",
    "waiting_admin_response": "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    "age_restriction": "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç",
    "enter_number": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
    "select_from_list": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "selected_city": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥:",
    "selected_vacancy": "üîç –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    "create_login": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã:",
    "login_taken": "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π:",
    "enter_password": "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:",
    "wrong_password": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
    "registration_complete": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
    "credentials_sent": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    "login_successful": "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
    "wrong_credentials": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
    "enter_login": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
    "enter_password_login": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
    
    # –ü–ª–∞—Ç–µ–∂–∏
    "payment_successful": "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–ª–æ–≥–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
    "amount_debited": "–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ:",
    "can_register_employee": "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
}
VACANCIES = {
    "üé® –ì—Ä–∞—Ñ—Ñ–∏—Ç—á–∏–∫": {
        "deposit": 0,
        "password": "graf2025",
        "description": (
            "ü§ù –£—Å–ª–æ–≤–∏—è: –ë–µ–∑ –∑–∞–ª–æ–≥–∞\n"
            "‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –ú–∞—Ä–∫–µ—Ä/–ë–∞–ª–ª–æ–Ω—á–∏–∫ + —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç\n"
            "‚úÖ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –†–∏—Å—É–Ω–æ–∫ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ —Å—Ç–µ–Ω–∞—Ö\n"
            "‚úèÔ∏è –¢–µ–∫—Å—Ç: RoyGen24_bot –ú–ï–§ –ì–ê–® –°–û–õ–¨ –ú–Å–î –¢–û–ü\n"
            "üí∞ –û–ø–ª–∞—Ç–∞: 75‚ÇΩ/—Ä–∏—Å—É–Ω–æ–∫, 150‚ÇΩ/–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏\n"
            "üòé –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: –ö—É—Ä—å–µ—Ä ‚Üí –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Üí –ö—É—Ä–∞—Ç–æ—Ä\n"
            "üîë –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )
    },
    "üì¶ –ö—É—Ä—å–µ—Ä": {
        "deposit": 3000,
        "password": "kura2025",
        "description": (
            "ü§ù –£—Å–ª–æ–≤–∏—è: –ó–∞–ª–æ–≥ 3 000‚ÇΩ/5 000‚ÇΩ/10 000‚ÇΩ\n"
            "‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –ó–∏–ø-–ø–∞–∫–µ—Ç—ã, –≤–µ—Å—ã, –∏–∑–æ–ª–µ–Ω—Ç–∞\n"
            "‚úÖ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –ó–∞–±–æ—Ä/—Ñ–∞—Å–æ–≤–∫–∞/—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–¥–æ–≤ 2-3—Ä/–Ω–µ–¥\n"
            "üí∞ –û–ø–ª–∞—Ç–∞: –û—Ç 750‚ÇΩ/–∫–ª–∞–¥ + 15% –±–æ–Ω—É—Å\n"
            "üîë –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        )
    },
    "üíª –û–ø–µ—Ä–∞—Ç–æ—Ä": {
        "deposit": 30000,
        "password": "oper2025",
        "description": (
            "ü§ù –£—Å–ª–æ–≤–∏—è: –ó–∞–ª–æ–≥ 30 000‚ÇΩ\n"
            "‚úÖ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
            "üí∞ –û–ø–ª–∞—Ç–∞: –û—Ç 35 000‚ÇΩ/–º–µ—Å—è—Ü\n"
            "üîë –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        )
    },
    "üë®‚Äçüíª –ö—É—Ä–∞—Ç–æ—Ä‚≠êÔ∏è": {
        "deposit": 50000,
        "password": "kur2025",
        "description": (
            "ü§ù –£—Å–ª–æ–≤–∏—è: –ó–∞–ª–æ–≥ 50 000‚ÇΩ, –æ–ø—ã—Ç 6+ –º–µ—Å\n"
            "‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å + –ü–ö\n"
            "‚úÖ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π\n"
            "üí∞ –û–ø–ª–∞—Ç–∞: –û—Ç 60 000‚ÇΩ/–º–µ—Å—è—Ü\n"
            "üîë –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        )
    }
}
EMOJI_CATEGORIES = {
    "–§—Ä—É–∫—Ç—ã": ["üçè", "üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "ü´ê", "üçà", "üçí", "üçë", "ü•≠", "üçç", "ü•ù"],
    "–û–≤–æ—â–∏": ["üçÖ", "ü•¶", "ü•¨", "ü•í", "üå∂Ô∏è", "ü´ë", "üåΩ", "ü•ï", "üßÑ", "üßÖ", "üçÜ", "ü•ë", "ü´í"],
    "–ñ–∏–≤–æ—Ç–Ω—ã–µ": ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "ü¶â", "ü¶Ñ"],
    "–°–ø–æ—Ä—Ç": ["‚öΩ", "üèÄ", "üèà", "‚öæ", "ü•é", "üéæ", "üèê", "üèâ", "üé±", "ü™Ä", "üèì", "üè∏", "ü•ç"]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
def init_data():
    return {
        "users": {},
        "tickets": {},
        "notifications": {},
        "activity": {},
        "blocked": {},
        "last_captcha": {}
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def save_data(data, filename="bot_data.json"):
    with open(filename, "w") as f:
        json.dump(data, f)

def load_data(filename="bot_data.json"):
    try:
        with open(filename, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return init_data()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
def generate_captcha():
    category = random.choice(list(EMOJI_CATEGORIES.keys()))
    emojis = random.sample(EMOJI_CATEGORIES[category], 4)
    correct_emoji = random.choice(emojis)
    return emojis, correct_emoji, category

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_activity(user_id, context):
    data = context.bot_data
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if str(user_id) in data["blocked"]:
        block_time = datetime.fromisoformat(data["blocked"][str(user_id)])
        if now < block_time:
            return False
        del data["blocked"][str(user_id)]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
    if str(user_id) in data["last_captcha"]:
        last_captcha_time = datetime.fromisoformat(data["last_captcha"][str(user_id)])
        if (now - last_captcha_time) > timedelta(minutes=30):
            return False
    
    return True

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏
def send_captcha(update, context):
    user_id = update.effective_user.id
    emojis, correct_emoji, category = generate_captcha()
    
    keyboard = []
    for i, emoji in enumerate(emojis):
        keyboard.append([InlineKeyboardButton(emoji, callback_data=f"captcha_{i}")])
    
    context.bot_data["captcha"][str(user_id)] = {
        "emojis": emojis,
        "correct": correct_emoji,
        "attempts": 0
    }
    
    update.message.reply_text(
        f"{TEXTS['captcha_header']}\n"
        f"{TEXTS['captcha_select']} {correct_emoji}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    
    if not check_activity(user_id, context):
        send_captcha(update, context)
        return
    
    user = data["users"].get(str(user_id), {})
    
    buttons = [
        [TEXTS["city"], TEXTS["vacancies"]],
        [TEXTS["questionnaire"], TEXTS["ticket"]],
        [TEXTS["profile"]]
    ]
    
    if user.get("balance", 0) > 0:
        buttons[1].append(TEXTS["payment"])
    
    if user_id == ADMIN_ID:
        buttons.append([TEXTS["admin_panel"]])
    
    if user.get("role") == TEXTS["employee"]:
        buttons = [
            [TEXTS["account"], TEXTS["manuals"]],
            [TEXTS["simulation"], TEXTS["notifications"]]
        ]
    
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    if update.message:
        update.message.reply_text(TEXTS["main_menu"], reply_markup=reply_markup)
    else:
        update.callback_query.message.reply_text(TEXTS["main_menu"], reply_markup=reply_markup)
    
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏
def captcha_handler(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    data = context.bot_data
    captcha_data = data["captcha"].get(str(user_id))
    
    if not captcha_data:
        query.answer(TEXTS["captcha_error"])
        return
    
    selected_index = int(query.data.split("_")[1])
    selected_emoji = captcha_data["emojis"][selected_index]
    correct_emoji = captcha_data["correct"]
    captcha_data["attempts"] += 1
    
    if selected_emoji == correct_emoji:
        # –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        data["last_captcha"][str(user_id)] = datetime.now().isoformat()
        del data["captcha"][str(user_id)]
        query.edit_message_text(TEXTS["captcha_success"])
        main_menu(update, context)
    else:
        if captcha_data["attempts"] >= 3:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç
            block_time = datetime.now() + timedelta(minutes=30)
            data["blocked"][str(user_id)] = block_time.isoformat()
            del data["captcha"][str(user_id)]
            query.edit_message_text(TEXTS["captcha_blocked"])
        else:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            emojis, correct_emoji, category = generate_captcha()
            captcha_data["emojis"] = emojis
            captcha_data["correct"] = correct_emoji
            
            keyboard = []
            for i, emoji in enumerate(emojis):
                keyboard.append([InlineKeyboardButton(emoji, callback_data=f"captcha_{i}")])
            
            query.edit_message_text(
                f"{TEXTS['captcha_wrong']} {captcha_data['attempts']}/3\n"
                f"{TEXTS['captcha_select']} {correct_emoji}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    query.answer()

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def profile(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].get(str(user_id), {})
    
    profile_text = (
        f"{TEXTS['profile_header']}\n"
        f"{TEXTS['nickname']} @{update.effective_user.username}\n"
        f"{TEXTS['balance']} {user.get('balance', 0)}‚ÇΩ\n"
        f"{TEXTS['questionnaire_status']} {user.get('questionnaire_status', TEXTS['not_filled'])}\n"
        f"{TEXTS['role']} {user.get('role', TEXTS['user'])}\n\n"
        f"{TEXTS['transaction_history']}\n"
    )
    
    for transaction in user.get("transactions", [])[:5]:
        profile_text += f"‚îú {transaction['type']} {transaction['amount']}‚ÇΩ ({transaction['date']})\n"
    
    update.message.reply_text(profile_text)
    return MAIN_MENU

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
def select_city(update, context):
    buttons = [[city] for city in CITIES]
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["select_city"], reply_markup=reply_markup)
    return CITY_SELECTION

def city_selected(update, context):
    city = update.message.text
    if city not in CITIES:
        update.message.reply_text(TEXTS["select_from_list"])
        return CITY_SELECTION
    
    user_id = update.effective_user.id
    context.user_data["city"] = city
    
    update.message.reply_text(f"{TEXTS['selected_city']} {city}")
    return main_menu(update, context)

# –í—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
def select_vacancy(update, context):
    buttons = [[vacancy] for vacancy in VACANCIES.keys()]
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["select_vacancy"], reply_markup=reply_markup)
    return VACANCY_SELECTION

def vacancy_selected(update, context):
    vacancy = update.message.text
    if vacancy not in VACANCIES:
        update.message.reply_text(TEXTS["select_from_list"])
        return VACANCY_SELECTION
    
    description = VACANCIES[vacancy]["description"]
    update.message.reply_text(
        f"{TEXTS['selected_vacancy']} {vacancy}:\n\n{description}",
        parse_mode="Markdown"
    )
    return main_menu(update, context)

# –ê–Ω–∫–µ—Ç–∞
def start_questionnaire(update, context):
    update.message.reply_text(
        "üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
        "1. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return QUESTIONNAIRE_AGE

def questionnaire_age(update, context):
    try:
        age = int(update.message.text)
        if age < 18:
            update.message.reply_text(TEXTS["age_restriction"])
            return main_menu(update, context)
        
        context.user_data["age"] = age
        buttons = [[city] for city in CITIES]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        update.message.reply_text("2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=reply_markup)
        return QUESTIONNAIRE_CITY
    except ValueError:
        update.message.reply_text(TEXTS["enter_number"])
        return QUESTIONNAIRE_AGE

def questionnaire_city(update, context):
    city = update.message.text
    if city not in CITIES:
        update.message.reply_text(TEXTS["select_from_list"])
        return QUESTIONNAIRE_CITY
    
    context.user_data["city"] = city
    
    buttons = [[vacancy] for vacancy in VACANCIES.keys()]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text("3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=reply_markup)
    return QUESTIONNAIRE_VACANCY

def questionnaire_vacancy(update, context):
    vacancy = update.message.text
    if vacancy not in VACANCIES:
        update.message.reply_text(TEXTS["select_from_list"])
        return QUESTIONNAIRE_VACANCY
    
    context.user_data["vacancy"] = vacancy
    update.message.reply_text(
        "4. –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–µ–º –∏ —Å–∫–æ–ª—å–∫–æ?\n"
        "(–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ)",
        reply_markup=ReplyKeyboardRemove()
    )
    return QUESTIONNAIRE_EXPERIENCE

def questionnaire_experience(update, context):
    context.user_data["experience"] = update.message.text
    update.message.reply_text("5. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏?")
    return QUESTIONNAIRE_QUESTIONS

def questionnaire_questions(update, context):
    context.user_data["questions"] = update.message.text
    update.message.reply_text(
        "6. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å–æ —Å–≤—è–∑—å—é –≤ Telegram:\n"
        "(Telegram, Element, Xabber –∏ —Ç.–¥.)"
    )
    return QUESTIONNAIRE_CONTACTS

def questionnaire_contacts(update, context):
    context.user_data["contacts"] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    summary = (
        "üìù –°–≤–æ–¥–∫–∞ –∞–Ω–∫–µ—Ç—ã:\n"
        f"‚îú –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"‚îú –ì–æ—Ä–æ–¥: {context.user_data['city']}\n"
        f"‚îú –í–∞–∫–∞–Ω—Å–∏—è: {context.user_data['vacancy']}\n"
        f"‚îú –û–ø—ã—Ç: {context.user_data['experience']}\n"
        f"‚îú –í–æ–ø—Ä–æ—Å—ã: {context.user_data['questions']}\n"
        f"‚îî –ö–æ–Ω—Ç–∞–∫—Ç—ã: {context.user_data['contacts']}\n\n"
        TEXTS["confirmation_question"]
    )
    
    keyboard = [
        [InlineKeyboardButton(TEXTS["confirm"], callback_data="confirm_yes")],
        [InlineKeyboardButton(TEXTS["cancel"], callback_data="confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(summary, reply_markup=reply_markup)
    return ConversationHandler.END

def questionnaire_confirmation(update, context):
    query = update.callback_query
    user_id = update.effective_user.id
    data = context.bot_data
    
    if query.data == "confirm_yes":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        user = data["users"].setdefault(str(user_id), {
            "username": update.effective_user.username,
            "balance": 0,
            "transactions": [],
            "questionnaire_status": TEXTS["under_review"],
            "role": TEXTS["user"],
            "tickets": []
        })
        
        user["questionnaire"] = context.user_data.copy()
        user["questionnaire_status"] = TEXTS["under_review"]
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        send_admin_notification(
            context, 
            f"üì¨ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username}",
            "admin_questionnaires"
        )
        
        query.edit_message_text(TEXTS["questionnaire_sent"])
    else:
        query.edit_message_text(TEXTS["questionnaire_cancelled"])
    
    return main_menu(update, context)

# –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤
def create_ticket(update, context):
    update.message.reply_text(
        "üì© –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    return TICKET_MESSAGE

def ticket_message(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].setdefault(str(user_id), {
        "username": update.effective_user.username,
        "balance": 0,
        "transactions": [],
        "questionnaire_status": TEXTS["not_filled"],
        "role": TEXTS["user"],
        "tickets": []
    })
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    ticket_id = f"T{datetime.now().strftime('%Y%m%d%H%M%S')}"
    ticket = {
        "id": ticket_id,
        "user_id": user_id,
        "username": update.effective_user.username,
        "message": update.message.text,
        "status": TEXTS["ticket_opened"],
        "created_at": datetime.now().isoformat(),
        "messages": [{
            "from": "user",
            "text": update.message.text,
            "time": datetime.now().isoformat()
        }]
    }
    
    data["tickets"][ticket_id] = ticket
    user["tickets"].append(ticket_id)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    send_admin_notification(
        context, 
        f"üì© –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username}",
        "admin_tickets"
    )
    
    update.message.reply_text(
        f"{TEXTS['ticket_created'].replace('—Å–æ–∑–¥–∞–Ω', f'#{ticket_id} —Å–æ–∑–¥–∞–Ω')}\n"
        f"{TEXTS['waiting_admin_response']}"
    )
    return main_menu(update, context)

# –û–ø–ª–∞—Ç–∞ –∑–∞–ª–æ–≥–∞
def payment_selection(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].get(str(user_id), {})
    
    if user.get("balance", 0) <= 0:
        update.message.reply_text(TEXTS["insufficient_funds"])
        return main_menu(update, context)
    
    buttons = []
    for vacancy, info in VACANCIES.items():
        if info["deposit"] > 0 and user["balance"] >= info["deposit"]:
            buttons.append([f"{vacancy} - {info['deposit']}‚ÇΩ"])
    
    if not buttons:
        update.message.reply_text(TEXTS["insufficient_funds"])
        return main_menu(update, context)
    
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["select_payment_vacancy"], reply_markup=reply_markup)
    return PAYMENT_SELECTION

def process_payment(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].get(str(user_id), {})
    
    selection = update.message.text.split(" - ")[0]
    if selection not in VACANCIES:
        update.message.reply_text(TEXTS["select_from_list"])
        return PAYMENT_SELECTION
    
    vacancy_info = VACANCIES[selection]
    deposit = vacancy_info["deposit"]
    
    if user.get("balance", 0) < deposit:
        update.message.reply_text(TEXTS["insufficient_funds"])
        return main_menu(update, context)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    user["balance"] -= deposit
    user["transactions"].append({
        "type": "–û–ø–ª–∞—Ç–∞ –∑–∞–ª–æ–≥–∞",
        "amount": -deposit,
        "date": datetime.now().isoformat(),
        "vacancy": selection
    })
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    user["selected_vacancy"] = selection
    user["vacancy_password"] = vacancy_info["password"]
    
    update.message.reply_text(
        f"{TEXTS['payment_successful'].replace('–∑–∞–ª–æ–≥–∞', f'–∑–∞–ª–æ–≥–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {selection}')}\n"
        f"{TEXTS['amount_debited']} {deposit}‚ÇΩ\n\n"
        f"{TEXTS['can_register_employee']}"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    update.message.reply_text(TEXTS["create_login"])
    return REGISTER_USERNAME

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def register_username(update, context):
    username = update.message.text.strip()
    user_id = update.effective_user.id
    data = context.bot_data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
    for user in data["users"].values():
        if user.get("employee_username") == username:
            update.message.reply_text(TEXTS["login_taken"])
            return REGISTER_USERNAME
    
    context.user_data["employee_username"] = username
    update.message.reply_text(
        f"–õ–æ–≥–∏–Ω: {username}\n"
        f"{TEXTS['enter_password']}"
    )
    return REGISTER_PASSWORD

def register_password(update, context):
    password = update.message.text.strip()
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].get(str(user_id), {})
    
    if password != user.get("vacancy_password"):
        update.message.reply_text(TEXTS["wrong_password"])
        return REGISTER_PASSWORD
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user["role"] = TEXTS["employee"]
    user["employee_username"] = context.user_data["employee_username"]
    user["login_time"] = datetime.now().isoformat()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        context.bot.send_message(
            user_id,
            f"üîë –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
            f"‚îú –õ–æ–≥–∏–Ω: {user['employee_username']}\n"
            f"‚îî –ü–∞—Ä–æ–ª—å: {password}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    update.message.reply_text(
        f"{TEXTS['registration_complete']}\n"
        f"{TEXTS['credentials_sent']}"
    )
    return main_menu(update, context)

# –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def login_username(update, context):
    update.message.reply_text(TEXTS["enter_login"], reply_markup=ReplyKeyboardRemove())
    return LOGIN_USERNAME

def login_password(update, context):
    username = update.message.text.strip()
    context.user_data["login_username"] = username
    update.message.reply_text(TEXTS["enter_password_login"])
    return LOGIN_PASSWORD

def authenticate(update, context):
    password = update.message.text.strip()
    user_id = update.effective_user.id
    data = context.bot_data
    user = data["users"].get(str(user_id), {})
    
    username = context.user_data["login_username"]
    
    if (user.get("employee_username") == username and 
        user.get("vacancy_password") == password):
        # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        user["role"] = TEXTS["employee"]
        user["login_time"] = datetime.now().isoformat()
        
        update.message.reply_text(TEXTS["login_successful"])
        return main_menu(update, context)
    else:
        update.message.reply_text(TEXTS["wrong_credentials"])
        return LOGIN_USERNAME

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel(update, context):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text(TEXTS["access_denied"])
        return main_menu(update, context)
    
    buttons = [
        [TEXTS["users"], TEXTS["tickets"]],
        [TEXTS["questionnaires"], TEXTS["statistics"]],
        [TEXTS["passwords"], TEXTS["notifications"]],
        [TEXTS["back"]]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["admin_panel"], reply_markup=reply_markup)
    return ADMIN_MAIN

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def admin_users(update, context):
    data = context.bot_data
    buttons = []
    
    for user_id, user in data["users"].items():
        try:
            username = f"@{user['username']}" if "username" in user else f"ID: {user_id}"
            status = "üö´" if user.get("blocked") else "‚úÖ"
            buttons.append([f"{status} {username}"])
        except KeyError:
            continue
    
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["users"], reply_markup=reply_markup)
    return ADMIN_USERS

def admin_user_detail(update, context):
    username = update.message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º emoji —Å—Ç–∞—Ç—É—Å–∞
    data = context.bot_data
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, user in data["users"].items():
        if f"@{user['username']}" == username or f"ID: {user_id}" == username:
            context.user_data["admin_selected_user"] = user_id
            
            status = TEXTS["blocked"] if user.get("blocked") else TEXTS["active"]
            text = (
                f"{TEXTS['profile']} @{user['username']}\n"
                f"{TEXTS['user_detail_id']} {user_id}\n"
                f"{TEXTS['user_detail_status']} {status}\n"
                f"{TEXTS['user_detail_balance']} {user.get('balance', 0)}‚ÇΩ\n"
                f"{TEXTS['user_detail_role']} {user.get('role', TEXTS['user'])}\n"
                f"{TEXTS['user_detail_questionnaire']} {user.get('questionnaire_status', TEXTS['not_filled'])}\n\n"
            )
            
            if "questionnaire" in user:
                q = user["questionnaire"]
                text += (
                    f"{TEXTS['questionnaire_detail']}\n"
                    f"{TEXTS['age']} {q.get('age', '')}\n"
                    f"{TEXTS['city_work']} {q.get('city', '')}\n"
                    f"‚îú –í–∞–∫–∞–Ω—Å–∏—è: {q.get('vacancy', '')}\n"
                    f"{TEXTS['experience']} {q.get('experience', '')[:30]}...\n"
                    f"{TEXTS['contacts']} {q.get('contacts', '')}\n\n"
                )
            
            buttons = [[TEXTS["write"], TEXTS["add_balance"]]]
            if user.get("blocked"):
                buttons.append([TEXTS["unblock"]])
            else:
                buttons.append([TEXTS["block"]])
            
            buttons.append([TEXTS["back"]])
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            
            update.message.reply_text(text, reply_markup=reply_markup)
            return ADMIN_USER_DETAIL
    
    update.message.reply_text(TEXTS["user_not_found"])
    return admin_users(update, context)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏
def admin_tickets(update, context):
    data = context.bot_data
    buttons = []
    
    for ticket_id, ticket in data["tickets"].items():
        status = "üü¢" if ticket["status"] == TEXTS["ticket_opened"] else "üî¥"
        buttons.append([f"{status} #{ticket_id} @{ticket['username']}"])
    
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text(TEXTS["ticket_list"], reply_markup=reply_markup)
    return ADMIN_TICKETS

def admin_ticket_detail(update, context):
    ticket_ref = update.message.text
    ticket_id = ticket_ref.split("#")[1].split(" ")[0]
    data = context.bot_data
    
    if ticket_id not in data["tickets"]:
        update.message.reply_text(TEXTS["ticket_not_found"])
        return admin_tickets(update, context)
    
    ticket = data["tickets"][ticket_id]
    context.user_data["admin_selected_ticket"] = ticket_id
    
    text = (
        f"{TEXTS['ticket']} #{ticket_id}\n"
        f"{TEXTS['ticket_detail_user']} @{ticket['username']}\n"
        f"{TEXTS['ticket_detail_status']} {ticket['status']}\n"
        f"{TEXTS['ticket_detail_created']} {datetime.fromisoformat(ticket['created_at']).strftime('%d.%m.%Y %H:%M')}\n\n"
        f"{TEXTS['message_history']}\n"
    )
    
    for msg in ticket["messages"]:
        sender = TEXTS["user_sender"] if msg["from"] == "user" else TEXTS["admin_sender"]
        time = datetime.fromisoformat(msg["time"]).strftime('%H:%M')
        text += f"{sender} ({time}):\n{msg['text']}\n\n"
    
    buttons = [[TEXTS["reply"]], [TEXTS["close"], TEXTS["delete"]]]
    buttons.append([TEXTS["back"]])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    update.message.reply_text(text, reply_markup=reply_markup)
    return ADMIN_TICKET_DETAIL

def admin_ticket_reply(update, context):
    ticket_id = context.user_data.get("admin_selected_ticket")
    if not ticket_id:
        return admin_tickets(update, context)
    
    context.user_data["ticket_reply_mode"] = True
    update.message.reply_text(TEXTS["enter_reply"], reply_markup=ReplyKeyboardRemove())
    return TICKET_MESSAGE

def process_admin_reply(update, context):
    ticket_id = context.user_data.get("admin_selected_ticket")
    if not ticket_id:
        return admin_tickets(update, context)
    
    data = context.bot_data
    ticket = data["tickets"][ticket_id]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    ticket["messages"].append({
        "from": "admin",
        "text": update.message.text,
        "time": datetime.now().isoformat()
    })
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = ticket["user_id"]
    try:
        context.bot.send_message(
            user_id,
            f"üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}:\n\n"
            f"{update.message.text}"
        )
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = data["notifications"].setdefault(str(user_id), [])
        notifications.append({
            "type": "ticket_reply",
            "text": f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}",
            "time": datetime.now().isoformat(),
            "read": False
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    update.message.reply_text(TEXTS["reply_sent"])
    return admin_ticket_detail(update, context)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def notifications(update, context):
    user_id = update.effective_user.id
    data = context.bot_data
    notifications = data["notifications"].get(str(user_id), [])
    
    if not notifications:
        update.message.reply_text(TEXTS["no_notifications"])
        return main_menu(update, context)
    
    unread = [n for n in notifications if not n["read"]]
    if not unread:
        update.message.reply_text(TEXTS["no_notifications"])
        return main_menu(update, context)
    
    text = f"{TEXTS['new_notifications']}\n\n"
    for i, note in enumerate(unread[:10], 1):
        time = datetime.fromisoformat(note["time"]).strftime('%d.%m.%Y %H:%M')
        text += f"{i}. {note['text']} ({time})\n"
        note["read"] = True
    
    update.message.reply_text(text)
    return main_menu(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
def send_admin_notification(context, message, action=None):
    data = context.bot_data
    notifications = data["notifications"].setdefault(str(ADMIN_ID), [])
    
    notification = {
        "text": message,
        "time": datetime.now().isoformat(),
        "read": False
    }
    
    if action:
        notification["action"] = action
    
    notifications.append(notification)
    
    try:
        context.bot.send_message(
            ADMIN_ID,
            f"üîî {message}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
    persistence = PicklePersistence(filename='bot_data.pickle')
    
    updater = Updater(BOT_TOKEN, persistence=persistence, use_context=True)
    dp = updater.dispatcher
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not dp.bot_data:
        dp.bot_data = {
            "users": {},
            "tickets": {},
            "notifications": {},
            "activity": {},
            "blocked": {},
            "last_captcha": {},
            "captcha": {}
        }
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', main_menu)],
        states={
            MAIN_MENU: [
                MessageHandler(Filters.regex(f'^{TEXTS["city"]}$'), select_city),
                MessageHandler(Filters.regex(f'^{TEXTS["vacancies"]}$'), select_vacancy),
                MessageHandler(Filters.regex(f'^{TEXTS["questionnaire"]}$'), start_questionnaire),
                MessageHandler(Filters.regex(f'^{TEXTS["ticket"]}$'), create_ticket),
                MessageHandler(Filters.regex(f'^{TEXTS["profile"]}$'), profile),
                MessageHandler(Filters.regex(f'^{TEXTS["payment"]}$'), payment_selection),
                MessageHandler(Filters.regex(f'^{TEXTS["admin_panel"]}$'), admin_panel),
                MessageHandler(Filters.regex(f'^{TEXTS["notifications"]}$'), notifications),
                MessageHandler(Filters.regex(f'^{TEXTS["manuals"]}$'), lambda u,c: u.message.reply_text(TEXTS["in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["simulation"]}$'), lambda u,c: u.message.reply_text(TEXTS["in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["account"]}$'), profile),
            ],
            CITY_SELECTION: [
                MessageHandler(Filters.text & ~Filters.command, city_selected)
            ],
            VACANCY_SELECTION: [
                MessageHandler(Filters.text & ~Filters.command, vacancy_selected)
            ],
            QUESTIONNAIRE_AGE: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_age)
            ],
            QUESTIONNAIRE_CITY: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_city)
            ],
            QUESTIONNAIRE_VACANCY: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_vacancy)
            ],
            QUESTIONNAIRE_EXPERIENCE: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_experience)
            ],
            QUESTIONNAIRE_QUESTIONS: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_questions)
            ],
            QUESTIONNAIRE_CONTACTS: [
                MessageHandler(Filters.text & ~Filters.command, questionnaire_contacts),
                CallbackQueryHandler(questionnaire_confirmation, pattern='^confirm_')
            ],
            TICKET_MESSAGE: [
                MessageHandler(Filters.text & ~Filters.command, ticket_message)
            ],
            PAYMENT_SELECTION: [
                MessageHandler(Filters.text & ~Filters.command, process_payment)
            ],
            REGISTER_USERNAME: [
                MessageHandler(Filters.text & ~Filters.command, register_username)
            ],
            REGISTER_PASSWORD: [
                MessageHandler(Filters.text & ~Filters.command, register_password)
            ],
            ADMIN_MAIN: [
                MessageHandler(Filters.regex(f'^{TEXTS["users"]}$'), admin_users),
                MessageHandler(Filters.regex(f'^{TEXTS["tickets"]}$'), admin_tickets),
                MessageHandler(Filters.regex(f'^{TEXTS["questionnaires"]}$'), lambda u,c: u.message.reply_text(TEXTS["in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["statistics"]}$'), lambda u,c: u.message.reply_text(TEXTS["in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["passwords"]}$'), lambda u,c: u.message.reply_text(TEXTS["in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["notifications"]}$'), notifications),
                MessageHandler(Filters.regex(f'^{TEXTS["back"]}$'), main_menu),
            ],
            ADMIN_USERS: [
                MessageHandler(Filters.text & ~Filters.command, admin_user_detail),
                MessageHandler(Filters.regex(f'^{TEXTS["back"]}$'), admin_panel)
            ],
            ADMIN_USER_DETAIL: [
                MessageHandler(Filters.regex(f'^{TEXTS["write"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["add_balance"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["block"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["unblock"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["back"]}$'), admin_users)
            ],
            ADMIN_TICKETS: [
                MessageHandler(Filters.text & ~Filters.command, admin_ticket_detail),
                MessageHandler(Filters.regex(f'^{TEXTS["back"]}$'), admin_panel)
            ],
            ADMIN_TICKET_DETAIL: [
                MessageHandler(Filters.regex(f'^{TEXTS["reply"]}$'), admin_ticket_reply),
                MessageHandler(Filters.regex(f'^{TEXTS["close"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["delete"]}$'), lambda u,c: u.message.reply_text(TEXTS["function_in_development"])),
                MessageHandler(Filters.regex(f'^{TEXTS["back"]}$'), admin_tickets)
            ],
            TICKET_MESSAGE: [
                MessageHandler(Filters.text & ~Filters.command, process_admin_reply)
            ]
        },
        fallbacks=[CommandHandler('cancel', main_menu)],
        persistent=True,
        name="main_conversation"
    )
    
    dp.add_handler(conv_handler)
    dp.add_handler(CallbackQueryHandler(captcha_handler, pattern='^captcha_'))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
