import logging
from datetime import datetime
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler
)

from config import (
    BOT_TOKEN, 
    MAIN_MENU, CREATE_CHAT_MENU, CHAT_WITH_SETTINGS, CHAT_WITHOUT_SETTINGS,
    CHAT_LIST, ACTIVE_CHAT, CHAT_MANAGEMENT, SCENARIO_INPUT, CHAT_RENAME,
    DEFAULT_SCENARIO, MAX_CHATS_PER_USER, MAX_MESSAGE_LENGTH
)
from database import db
from ai_model import ai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class OdannBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –û–¥–∞–Ω–Ω"""
        self.updater = Updater(BOT_TOKEN, use_context=True)
        self.dp = self.updater.dispatcher
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start_command)],
            states={
                MAIN_MENU: [
                    CallbackQueryHandler(self.create_chat_menu, pattern='^create_chat$'),
                    CallbackQueryHandler(self.show_chat_list, pattern='^chat_list$'),
                ],
                CREATE_CHAT_MENU: [
                    CallbackQueryHandler(self.chat_with_settings, pattern='^with_settings$'),
                    CallbackQueryHandler(self.chat_without_settings, pattern='^without_settings$'),
                    CallbackQueryHandler(self.back_to_main, pattern='^back_to_main$'),
                ],
                SCENARIO_INPUT: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_scenario),
                ],
                CHAT_LIST: [
                    CallbackQueryHandler(self.open_chat, pattern='^open_chat_'),
                    CallbackQueryHandler(self.back_to_main, pattern='^back_to_main$'),
                ],
                ACTIVE_CHAT: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_message),
                    CallbackQueryHandler(self.chat_management, pattern='^manage_chat$'),
                    CallbackQueryHandler(self.back_to_main, pattern='^exit_chat$'),
                ],
                CHAT_MANAGEMENT: [
                    CallbackQueryHandler(self.delete_chat, pattern='^delete_chat$'),
                    CallbackQueryHandler(self.rename_chat_start, pattern='^rename_chat$'),
                    CallbackQueryHandler(self.back_to_chat, pattern='^back_to_chat$'),
                ],
                CHAT_RENAME: [
                    MessageHandler(Filters.text & ~Filters.command, self.process_rename),
                ]
            },
            fallbacks=[CommandHandler('start', self.start_command)],
            allow_reentry=True
        )
        
        self.dp.add_handler(conv_handler)
        self.dp.add_error_handler(self.error_handler)
    
    def start_command(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username, user.first_name)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        welcome_text = (
            "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã! üå∏\n\n"
            "–Ø –û–¥–∞–Ω–Ω, —Å–ª—É–∂–∞–Ω–∫–∞ –∏ –ø–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –¶—É–Ω–∏–∫—É-–∏–Ω! "
            "–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è–º–∏ –æ –º–∏—Ä–µ –¥—É—Ö–æ–≤~\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", callback_data='create_chat')],
            [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data='chat_list')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
        return MAIN_MENU
    
    def create_chat_menu(self, update: Update, context: CallbackContext) -> int:
        """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chat_count = db.get_chat_count(user_id)
        
        if chat_count >= MAX_CHATS_PER_USER:
            query.edit_message_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ ({MAX_CHATS_PER_USER})\n"
                "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CREATE_CHAT_MENU
        
        text = (
            "‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –û–¥–∞–Ω–Ω ‚ú®\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–∞:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", callback_data='with_settings')],
            [InlineKeyboardButton("üé¨ –ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∏–º–µ)", callback_data='without_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return CREATE_CHAT_MENU
    
    def chat_with_settings(self, update: Update, context: CallbackContext) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        query = update.callback_query
        query.answer()
        
        text = (
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –û–¥–∞–Ω–Ω:\n"
            "‚Ä¢ –ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ?\n"
            "‚Ä¢ –ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è?\n"
            "‚Ä¢ –ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç–µ –≤—ã?\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–Ø –≥–æ—Å—Ç—å –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –±–ª—é–¥–æ –û–¥–∞–Ω–Ω –∏ —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç'"
        )
        
        query.edit_message_text(text)
        context.user_data['chat_type'] = 'with_settings'
        return SCENARIO_INPUT
    
    def chat_without_settings(self, update: Update, context: CallbackContext) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chat_title = f"–ß–∞—Ç —Å –û–¥–∞–Ω–Ω #{datetime.now().strftime('%d.%m %H:%M')}"
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        chat_id = db.create_chat(user_id, chat_title, DEFAULT_SCENARIO)
        
        if chat_id:
            context.user_data['current_chat_id'] = chat_id
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –û–¥–∞–Ω–Ω
            greeting = ai.generate_response("–ø—Ä–∏–≤–µ—Ç", [], DEFAULT_SCENARIO)
            db.add_message(chat_id, 'bot', greeting)
            
            text = (
                f"‚ú® –ß–∞—Ç '{chat_title}' —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìñ –°—Ü–µ–Ω–∞—Ä–∏–π:\n{DEFAULT_SCENARIO}\n\n"
                f"üå∏ –û–¥–∞–Ω–Ω: {greeting}\n\n"
                "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(text, reply_markup=reply_markup)
            return ACTIVE_CHAT
        else:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CREATE_CHAT_MENU
    
    def process_scenario(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        scenario = update.message.text.strip()
        
        if len(scenario) > 500:
            update.message.reply_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return SCENARIO_INPUT
        
        user_id = update.effective_user.id
        chat_title = f"–ß–∞—Ç: {scenario[:30]}..." if len(scenario) > 30 else f"–ß–∞—Ç: {scenario}"
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        chat_id = db.create_chat(user_id, chat_title, scenario)
        
        if chat_id:
            context.user_data['current_chat_id'] = chat_id
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –û–¥–∞–Ω–Ω —Å —É—á–µ—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
            greeting = ai.generate_response("–ø—Ä–∏–≤–µ—Ç", [], scenario)
            db.add_message(chat_id, 'bot', greeting)
            
            text = (
                f"‚ú® –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìñ –í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π:\n{scenario}\n\n"
                f"üå∏ –û–¥–∞–Ω–Ω: {greeting}\n\n"
                "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(text, reply_markup=reply_markup)
            return ACTIVE_CHAT
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardMarkup([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], resize_keyboard=True)
            )
            return self.start_command(update, context)
    
    def show_chat_list(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        query.answer()
        
        user_id = update.effective_user.id
        chats = db.get_user_chats(user_id)
        
        if not chats:
            text = (
                "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç —Å –û–¥–∞–Ω–Ω!"
            )
            keyboard = [
                [InlineKeyboardButton("üí¨ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", callback_data='create_chat')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
        else:
            text = "üìö –í–∞—à–∏ —á–∞—Ç—ã —Å –û–¥–∞–Ω–Ω:\n\n"
            keyboard = []
            
            for chat in chats:
                creation_date = datetime.fromisoformat(chat['creation_date']).strftime('%d.%m %H:%M')
                chat_button_text = f"üí¨ {chat['title']} ({creation_date})"
                keyboard.append([InlineKeyboardButton(
                    chat_button_text, 
                    callback_data=f'open_chat_{chat["chat_id"]}'
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text, reply_markup=reply_markup)
        return CHAT_LIST
    
    def open_chat(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        chat_id = int(query.data.split('_')[2])
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat_info = db.get_chat_info(chat_id)
        if not chat_info or chat_info['user_id'] != user_id:
            query.edit_message_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]])
            )
            return CHAT_LIST
        
        context.user_data['current_chat_id'] = chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = db.get_chat_history(chat_id, 20)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        chat_context = ai.format_chat_context(history, chat_info['scenario'])
        
        text = (
            f"üí¨ –ß–∞—Ç: {chat_info['title']}\n\n"
            f"{chat_context}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return ACTIVE_CHAT
    
    def process_message(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
        user_message = update.message.text.strip()
        chat_id = context.user_data.get('current_chat_id')
        
        if not chat_id:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return self.start_command(update, context)
        
        if len(user_message) > MAX_MESSAGE_LENGTH:
            update.message.reply_text(
                f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return ACTIVE_CHAT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_message(chat_id, 'user', user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
        chat_info = db.get_chat_info(chat_id)
        history = db.get_chat_history(chat_id, 10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –û–¥–∞–Ω–Ω
        try:
            bot_response = ai.generate_response(user_message, history, chat_info['scenario'])
            db.add_message(chat_id, 'bot', bot_response)
            
            update.message.reply_text(f"üå∏ –û–¥–∞–Ω–Ω: {bot_response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            update.message.reply_text(
                "üòÖ –û–¥–∞–Ω–Ω: –û–π, –∏–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å... –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
            )
        
        return ACTIVE_CHAT
    
    def chat_management(self, update: Update, context: CallbackContext) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        chat_info = db.get_chat_info(chat_id)
        
        text = (
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info['title']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(chat_info['creation_date']).strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data='rename_chat')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data='delete_chat')],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data='back_to_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return CHAT_MANAGEMENT
    
    def delete_chat(self, update: Update, context: CallbackContext) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        user_id = update.effective_user.id
        
        if db.delete_chat(chat_id, user_id):
            query.edit_message_text(
                "‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
                ]])
            )
            context.user_data.pop('current_chat_id', None)
            return MAIN_MENU
        else:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
    
    def rename_chat_start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        query.answer()
        
        query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:\n"
            "(–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return CHAT_RENAME
    
    def process_rename(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        new_title = update.message.text.strip()
        
        if len(new_title) > 50:
            update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return CHAT_RENAME
        
        chat_id = context.user_data.get('current_chat_id')
        user_id = update.effective_user.id
        
        if db.rename_chat(chat_id, user_id, new_title):
            update.message.reply_text(
                f"‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_title}'",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_chat')
                ]])
            )
            return CHAT_MANAGEMENT
    
    def back_to_main(self, update: Update, context: CallbackContext) -> int:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        context.user_data.clear()
        return self.start_command(update, context)
    
    def back_to_chat(self, update: Update, context: CallbackContext) -> int:
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—É"""
        query = update.callback_query
        query.answer()
        
        chat_id = context.user_data.get('current_chat_id')
        chat_info = db.get_chat_info(chat_id)
        history = db.get_chat_history(chat_id, 5)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        chat_context = ai.format_chat_context(history, chat_info['scenario'])
        
        text = (
            f"üí¨ –ß–∞—Ç: {chat_info['title']}\n\n"
            f"{chat_context}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ!"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", callback_data='manage_chat')],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        return ACTIVE_CHAT
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f'Update {update} caused error {context.error}')
        
        if update.effective_message:
            update.effective_message.reply_text(
                "üòÖ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω...")
        self.updater.start_polling()
        self.updater.idle()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = OdannBot()
    bot.run()

if __name__ == '__main__':
    main()