import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from dotenv import load_dotenv

from database import Database
from ai_model import OdannaAI
from keyboards import BotKeyboards
from keep_alive import keep_alive

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_CHAT_TITLE, WAITING_SCENARIO, WAITING_RENAME = range(3)

class OdannaBot:
    def __init__(self):
        self.db = Database()
        self.ai = OdannaAI()
        self.keyboards = BotKeyboards()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db.add_user(user.id, user.username)
        
        welcome_text = """üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üå∏

–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–¥–∞–Ω–Ω, –∏ —è –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥ –∏–∑ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –¢—ç–Ω–¥–∑–∏–Ω-—è! 

–Ø –º–æ–≥—É:
‚ú® –û–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∞–Ω–∏–º–µ
üí¨ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
üìö –†–∞–∑–≤–∏–≤–∞—Ç—å —Å—é–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–¥–µ–π
üé≠ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º–∏—Ä–∞ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã"

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboards.get_main_menu()
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "main_menu":
            await self.show_main_menu(query)
        elif data == "create_chat":
            await self.show_create_chat_menu(query)
        elif data == "create_with_settings":
            await self.start_chat_creation_with_settings(query, context)
        elif data == "create_default":
            await self.create_default_chat(query, user_id)
        elif data == "chat_list":
            await self.show_chat_list(query, user_id)
        elif data.startswith("open_chat_"):
            chat_id = int(data.split("_")[2])
            await self.open_chat(query, user_id, chat_id)
        elif data.startswith("rename_chat_"):
            chat_id = int(data.split("_")[2])
            await self.start_rename_chat(query, context, chat_id)
        elif data.startswith("delete_chat_"):
            chat_id = int(data.split("_")[2])
            await self.confirm_delete_chat(query, chat_id)
        elif data.startswith("confirm_delete_"):
            chat_id = int(data.split("_")[2])
            await self.delete_chat(query, user_id, chat_id)
        elif data == "help":
            await self.show_help(query)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = """üèÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç —Å –û–¥–∞–Ω–Ω
üìã –û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_main_menu()
        )
    
    async def show_create_chat_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        text = """‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞

üé≠ **–ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∞–Ω–∏–º–µ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã"

‚öôÔ∏è **–° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏** - –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"""
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_create_chat_menu(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def start_chat_creation_with_settings(self, query, context):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        text = """‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞:
(–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ", "–£—Ä–æ–∫ –≥–æ—Ç–æ–≤–∫–∏ —Å –û–¥–∞–Ω–Ω")"""
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        self.user_states[query.from_user.id] = {'state': WAITING_CHAT_TITLE}
        return WAITING_CHAT_TITLE
    
    async def create_default_chat(self, query, user_id):
        """–°–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –≤ –ë–î
        chat_id = self.db.create_chat(
            user_id=user_id,
            title="–û–±—â–µ–Ω–∏–µ —Å –û–¥–∞–Ω–Ω",
            scenario=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = self.ai.create_initial_message()
        self.db.add_message(chat_id, "bot", initial_message)
        
        text = f"""‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!

**–ù–∞–∑–≤–∞–Ω–∏–µ:** –û–±—â–µ–Ω–∏–µ —Å –û–¥–∞–Ω–Ω
**–°—Ü–µ–Ω–∞—Ä–∏–π:** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–Ω–µ–±–µ—Å–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞)

{initial_message}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –û–¥–∞–Ω–Ω! –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –æ–Ω–∞ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç."""
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_chat_management_keyboard(chat_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        self.user_states[user_id] = {'active_chat': chat_id}
    
    async def show_chat_list(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chats = self.db.get_user_chats(user_id)
        
        if chats:
            text = f"üìã –í–∞—à–∏ —á–∞—Ç—ã ({len(chats)}):\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è:"
        else:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –û–¥–∞–Ω–Ω!"
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_chat_list_keyboard(chats)
        )
    
    async def open_chat(self, query, user_id, chat_id):
        """–û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç"""
        chat_info = self.db.get_chat_info(chat_id)
        
        if not chat_info or chat_info[1] != user_id:
            await query.edit_message_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                reply_markup=self.keyboards.get_main_menu()
            )
            return
        
        _, _, title, scenario, creation_date = chat_info
        messages = self.db.get_chat_messages(chat_id, limit=20)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        text = f"üí¨ **{title}**\n\n"
        
        if scenario:
            text += f"üìñ *–°—Ü–µ–Ω–∞—Ä–∏–π:* {scenario}\n\n"
        
        text += "üìö **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
        
        if messages:
            for role, content, timestamp in messages[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                if role == "user":
                    text += f"üë§ **–í—ã:** {content}\n\n"
                else:
                    text += f"üå∏ **–û–¥–∞–Ω–Ω:** {content}\n\n"
        else:
            text += "*–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        
        text += "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ!"
        
        await query.edit_message_text(
            text,
            reply_markup=self.keyboards.get_chat_management_keyboard(chat_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        self.user_states[user_id] = {'active_chat': chat_id}
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id, {})
        
        if user_state.get('state') == WAITING_CHAT_TITLE:
            await self.handle_chat_title_input(update, context, text)
        elif user_state.get('state') == WAITING_SCENARIO:
            await self.handle_scenario_input(update, context, text)
        elif user_state.get('state') == WAITING_RENAME:
            await self.handle_rename_input(update, context, text)
        elif 'active_chat' in user_state:
            await self.handle_chat_message(update, context, text, user_state['active_chat'])
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –û–¥–∞–Ω–Ω:",
                reply_markup=self.keyboards.get_main_menu()
            )
    
    async def handle_chat_title_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, title: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è
        self.user_states[user_id] = {
            'state': WAITING_SCENARIO,
            'chat_title': title
        }
        
        text = f"""‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "{title}"

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è:
(–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú—ã –≥–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ —É–∂–∏–Ω –¥–ª—è –≥–æ—Å—Ç–µ–π", "–û–¥–∞–Ω–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É", "–û–±—ã—á–Ω–æ–µ –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ")

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        
        await update.message.reply_text(
            text,
            reply_markup=self.keyboards.get_cancel_keyboard()
        )
    
    async def handle_scenario_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, scenario: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        user_id = update.effective_user.id
        user_state = self.user_states[user_id]
        title = user_state['chat_title']
        
        if scenario.lower() == "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π":
            scenario = None
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –≤ –ë–î
        chat_id = self.db.create_chat(
            user_id=user_id,
            title=title,
            scenario=scenario
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = self.ai.create_initial_message(scenario)
        self.db.add_message(chat_id, "bot", initial_message)
        
        text = f"""‚úÖ –ß–∞—Ç "{title}" —Å–æ–∑–¥–∞–Ω!

{initial_message}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –û–¥–∞–Ω–Ω! –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        await update.message.reply_text(
            text,
            reply_markup=self.keyboards.get_chat_management_keyboard(chat_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {'active_chat': chat_id}
    
    async def handle_chat_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db.add_message(chat_id, "user", text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = self.db.get_chat_info(chat_id)
        if not chat_info:
            await update.message.reply_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        scenario = chat_info[3]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = self.db.get_chat_messages(chat_id)
        message_history = [{'role': role, 'content': content} for role, content, _ in messages]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –û–¥–∞–Ω–Ω
            response = self.ai.generate_response(message_history, scenario)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
            self.db.add_message(chat_id, "bot", response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            error_response = "–û–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â—ë —Ä–∞–∑? üòÖ"
            await update.message.reply_text(error_response)
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –°–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑)
2. –û–±—â–∞–π—Ç–µ—Å—å —Å –û–¥–∞–Ω–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ —Å AI –≤ —Ä–æ–ª–∏ –û–¥–∞–Ω–Ω
‚Ä¢ üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä
‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏

**–û –ø–µ—Ä—Å–æ–Ω–∞–∂–µ:**
–û–¥–∞–Ω–Ω - –≥–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –∞–Ω–∏–º–µ "–ü–æ–≤–∞—Ä –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã". –û–Ω–∞ –¥–æ–±—Ä–∞—è, –æ—Ç–∑—ã–≤—á–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞-–ø–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–±–µ—Å–Ω–æ–π –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ –¥–ª—è –¥—É—Ö–æ–≤ –∏ –¥–µ–º–æ–Ω–æ–≤.

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        
        await query.edit_message_text(
            help_text,
            reply_markup=self.keyboards.get_main_menu(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
    async def start_rename_chat(self, query, context, chat_id):
        """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞"""
        user_id = query.from_user.id
        
        self.user_states[user_id] = {
            'state': WAITING_RENAME,
            'rename_chat_id': chat_id
        }
        
        await query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:",
            reply_markup=self.keyboards.get_back_to_chat_keyboard(chat_id)
        )
    
    async def handle_rename_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, new_title: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        user_id = update.effective_user.id
        user_state = self.user_states[user_id]
        chat_id = user_state['rename_chat_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î
        self.db.update_chat_title(chat_id, user_id, new_title)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —á–∞—Ç—É
        self.user_states[user_id] = {'active_chat': chat_id}
        
        await update.message.reply_text(
            f"‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: '{new_title}'",
            reply_markup=self.keyboards.get_chat_management_keyboard(chat_id)
        )
    
    async def confirm_delete_chat(self, query, chat_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?\n\n–í—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω–∞!",
            reply_markup=self.keyboards.get_confirm_delete_keyboard(chat_id)
        )
    
    async def delete_chat(self, query, user_id, chat_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
        self.db.delete_chat(chat_id, user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            self.user_states[user_id] = {}
        
        await query.edit_message_text(
            "‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω!",
            reply_markup=self.keyboards.get_main_menu()
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –¥–ª—è Replit
    keep_alive()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = OdannaBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üå∏ –ë–æ—Ç –û–¥–∞–Ω–Ω –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()