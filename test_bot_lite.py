#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ PyTorch –∏ Telegram API
"""

import sqlite3
import tempfile
import os
import re
from datetime import datetime

def test_database_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç SQLite –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üóÉÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        db_path = temp_db.name
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            gender TEXT DEFAULT 'unknown',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS chats (
            chat_id TEXT PRIMARY KEY,
            user_id INTEGER,
            chat_name TEXT,
            scenario TEXT,
            empathy_level INTEGER DEFAULT 35,
            message_count INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            user_id INTEGER,
            message_text TEXT,
            response_text TEXT,
            is_ignored BOOLEAN DEFAULT FALSE,
            emotion_analysis TEXT,
            empathy_level INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (chat_id) REFERENCES chats (chat_id),
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, username, first_name, last_name, gender, last_activity)
        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (12345, "test_user", "–¢–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "female"))
        
        conn.commit()
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        chat_id = f"12345_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        cursor.execute('''
        INSERT INTO chats (chat_id, user_id, chat_name, scenario)
        VALUES (?, ?, ?, ?)
        ''', (chat_id, 12345, "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç", "–ù–µ–±–µ—Å–Ω–∞—è –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞"))
        
        conn.commit()
        print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat_id}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('''
        INSERT INTO messages 
        (chat_id, user_id, message_text, response_text, emotion_analysis, empathy_level)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (chat_id, 12345, "–ü—Ä–∏–≤–µ—Ç, –û–¥–∞–Ω–Ω–∞!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É.", "—Ä–∞–¥–æ—Å—Ç—å", 45))
        
        conn.commit()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        cursor.execute('''
        SELECT message_text, response_text, is_ignored, emotion_analysis, timestamp
        FROM messages 
        WHERE chat_id = ? 
        ORDER BY timestamp DESC 
        LIMIT 20
        ''', (chat_id,))
        
        messages = cursor.fetchall()
        assert len(messages) == 1
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        conn.close()
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)

def test_emotion_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π...")
    
    def analyze_emotion(text: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ª—é–±–ª—é']
        negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–∑–ª–æ–π', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–±–æ–ª—å–Ω–æ', '—É—Å—Ç–∞–ª']
        question_words = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '?']
        
        text_lower = text.lower()
        emotions = []
        
        if any(word in text_lower for word in positive_words):
            emotions.append('—Ä–∞–¥–æ—Å—Ç—å')
        if any(word in text_lower for word in negative_words):
            emotions.append('–≥—Ä—É—Å—Ç—å')
        if any(word in text_lower for word in question_words):
            emotions.append('–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ')
        if len(text) > 100:
            emotions.append('–º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ—Å—Ç—å')
        if '!' in text:
            emotions.append('–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ')
        
        return ', '.join(emotions) if emotions else '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è...", "–≥—Ä—É—Å—Ç—å"),
        ("–ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ"),
        ("–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ!", "—Ä–∞–¥–æ—Å—Ç—å, –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ"),
        ("–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"),
        ("–Ø —Ç–∞–∫ —Å—á–∞—Å—Ç–ª–∏–≤!!!", "—Ä–∞–¥–æ—Å—Ç—å, –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ")
    ]
    
    for text, expected in test_cases:
        result = analyze_emotion(text)
        print(f"–¢–µ–∫—Å—Ç: '{text}' ‚Üí –≠–º–æ—Ü–∏–∏: {result}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —ç–º–æ—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è
        if expected != "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ":
            assert any(emotion in result for emotion in expected.split(", ")), \
                f"–û–∂–∏–¥–∞–ª–∏—Å—å —ç–º–æ—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{expected}', –ø–æ–ª—É—á–µ–Ω–æ '{result}'"
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_empathy_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è —ç–º–ø–∞—Ç–∏–∏"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —ç–º–ø–∞—Ç–∏–∏...")
    
    def calculate_empathy_level(emotion: str, current_level: int, message_count: int) -> int:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —ç–º–ø–∞—Ç–∏–∏"""
        # –ù–∞—á–∞–ª—å–Ω–∞—è —ç–º–ø–∞—Ç–∏—è
        if message_count <= 3:
            base_level = 35
        elif message_count <= 10:
            base_level = 50
        else:
            base_level = 70
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π
        if '–≥—Ä—É—Å—Ç—å' in emotion or '–±–æ–ª—å–Ω–æ' in emotion:
            base_level += 15
        elif '—Ä–∞–¥–æ—Å—Ç—å' in emotion:
            base_level += 5
        elif '–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ' in emotion:
            base_level -= 5
        
        return max(35, min(85, base_level))
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        (1, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", 35, 35),
        (5, "—Ä–∞–¥–æ—Å—Ç—å", 50, 55),
        (8, "–≥—Ä—É—Å—Ç—å", 50, 65),
        (15, "–≥—Ä—É—Å—Ç—å", 70, 85),
        (3, "–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ", 35, 30),  # –ù–æ –º–∏–Ω–∏–º—É–º 35
    ]
    
    for msg_count, emotion, current, expected_min in test_cases:
        result = calculate_empathy_level(emotion, current, msg_count)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_count}, —ç–º–æ—Ü–∏—è '{emotion}' ‚Üí –≠–º–ø–∞—Ç–∏—è: {result}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        assert 35 <= result <= 85, f"–≠–º–ø–∞—Ç–∏—è {result}% –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 35-85%"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        if "–≥—Ä—É—Å—Ç—å" in emotion:
            assert result >= 50, "–ü—Ä–∏ –≥—Ä—É—Å—Ç–∏ —ç–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π"
    
    print("‚úÖ –†–∞—Å—á–µ—Ç —ç–º–ø–∞—Ç–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_character_responses():
    """–¢–µ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –û–¥–∞–Ω–Ω—ã"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –û–¥–∞–Ω–Ω—ã...")
    
    def get_fallback_response(user_message: str, empathy_level: int, emotion: str) -> str:
        """–ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        
        responses = {
            35: [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... *–ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –∫—Ä–∞—Å–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏* –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.",
                "–í–∞—à–∏ —Å–ª–æ–≤–∞... –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –ß—Ç–æ –µ—â—ë –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
                "–•–º. *–ª–µ–≥–∫–∏–π –Ω–∞–∫–ª–æ–Ω –≥–æ–ª–æ–≤—ã* –Ø —Å–ª—É—à–∞—é."
            ],
            50: [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í –ù–µ–±–µ—Å–Ω–æ–π –ì–æ—Å—Ç–∏–Ω–∏—Ü–µ –º—ã –∑–Ω–∞–µ–º —Ü–µ–Ω—É —Å–ª–æ–≤–∞–º.",
                "–í–∞—à–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ.",
                "–ö–∞–∂–¥—ã–π –≥–æ—Å—Ç—å –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å."
            ],
            70: [
                "–í–∞—à–∏ —Å–ª–æ–≤–∞ —Ç—Ä–æ–Ω—É–ª–∏ –¥–∞–∂–µ –¥–µ–º–æ–Ω–∞ –≤—Ä–æ–¥–µ –º–µ–Ω—è. –ù–µ –¥–µ—Ä–∂–∏—Ç–µ –≤—Å—ë –≤ —Å–µ–±–µ.",
                "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ—è–≤–∏—Ç—å –∑–∞–±–æ—Ç—É, –∫–∞–∫ –ø–æ–¥–æ–±–∞–µ—Ç —Ö–æ–∑—è–∏–Ω—É –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã.",
                "–í –º–æ–∏—Ö –≥–ª–∞–∑–∞—Ö –≤—ã –≤–∏–¥–∏—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –º–Ω–µ."
            ]
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏
        closest_level = min(responses.keys(), key=lambda x: abs(x - empathy_level))
        level_responses = responses[closest_level]
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π
        if "–≥—Ä—É—Å—Ç—å" in emotion:
            return "–ü–µ—á–∞–ª—å... –æ–Ω–∞ –∑–Ω–∞–∫–æ–º–∞ –¥–∞–∂–µ –¥–µ–º–æ–Ω–∞–º. *–º—è–≥–∫–æ –∫–ª–∞–¥–µ—Ç —Ä—É–∫—É –Ω–∞ –ø–ª–µ—á–æ* –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö."
        elif "—Ä–∞–¥–æ—Å—Ç—å" in emotion:
            return "*–µ–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è —É–ª—ã–±–∫–∞* –†–∞–¥–æ—Å—Ç—å —É–∫—Ä–∞—à–∞–µ—Ç –ª—é–±–æ–≥–æ –≥–æ—Å—Ç—è. –ß—Ç–æ –ø—Ä–∏–Ω–µ—Å–ª–æ –≤–∞–º —Å—Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–∞?"
        elif "–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ" in emotion:
            return "*–ø–æ–¥–Ω–∏–º–∞–µ—Ç –±—Ä–æ–≤—å* –ö–∞–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è... –ù–∞–¥–µ—é—Å—å, –æ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–µ —Ä—É—Å–ª–æ?"
        
        return level_responses[len(user_message) % len(level_responses)]
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", 35, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"),
        ("–ú–Ω–µ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ...", 70, "–≥—Ä—É—Å—Ç—å"),
        ("–°–ø–∞—Å–∏–±–æ –≤–∞–º!", 50, "—Ä–∞–¥–æ—Å—Ç—å"),
        ("–ß—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ?", 40, "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ"),
    ]
    
    for message, empathy, emotion in test_cases:
        response = get_fallback_response(message, empathy, emotion)
        print(f"\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
        print(f"üòä –≠–º–ø–∞—Ç–∏—è: {empathy}%")
        print(f"üí≠ –≠–º–æ—Ü–∏—è: {emotion}")
        print(f"üèÆ –û–¥–∞–Ω–Ω–∞: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        assert len(response) > 10, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–º–ø–∞—Ç–∏–∏
        if empathy < 45:
            # –ù–∏–∑–∫–∞—è —ç–º–ø–∞—Ç–∏—è - –∏—Ä–æ–Ω–∏—è –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ç—å
            assert "*" in response or "..." in response, "–ù–∏–∑–∫–∞—è —ç–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏"
        
        if empathy > 60 and "–≥—Ä—É—Å—Ç—å" in emotion:
            # –í—ã—Å–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è –ø—Ä–∏ –≥—Ä—É—Å—Ç–∏ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            support_words = ["–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–∑–∞–±–æ—Ç–∞", "–¥–æ–≤–µ—Ä—å—Ç–µ—Å—å", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ", "–Ω–µ –¥–µ—Ä–∂–∏—Ç–µ"]
            assert any(word in response.lower() for word in support_words), \
                "–í—ã—Å–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–ª–æ–≤–∞"
    
    print("\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –û–¥–∞–Ω–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

def test_memory_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        db_path = temp_db.name
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
        CREATE TABLE messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            user_id INTEGER,
            message_text TEXT,
            response_text TEXT,
            is_ignored BOOLEAN DEFAULT FALSE,
            emotion_analysis TEXT,
            empathy_level INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = "test_chat_123"
        messages = [
            ("–ü—Ä–∏–≤–µ—Ç!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
            ("–ö–∞–∫ –¥–µ–ª–∞?", "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ."),
            ("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–Ø —Ö–æ–∑—è–∏–Ω –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã."),
            ("–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–Ω–∏–º–∞—é.")
        ]
        
        for msg_text, response_text in messages:
            cursor.execute('''
            INSERT INTO messages 
            (chat_id, user_id, message_text, response_text, emotion_analysis, empathy_level)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (chat_id, 12345, msg_text, response_text, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", 40))
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–∑–∞–±—ã—Ç—å"
        cursor.execute('''
        UPDATE messages 
        SET is_ignored = TRUE 
        WHERE chat_id = ? AND message_text = ?
        ORDER BY timestamp DESC LIMIT 1
        ''', (chat_id, "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        conn.commit()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±—ã—Ç–æ
        cursor.execute('''
        SELECT message_text, is_ignored FROM messages 
        WHERE chat_id = ? AND message_text = ?
        ''', (chat_id, "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        result = cursor.fetchone()
        assert result[1] == 1, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ"
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è '–∑–∞–±—ã—Ç—å' —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        cursor.execute('''
        UPDATE messages 
        SET is_ignored = FALSE 
        WHERE chat_id = ? AND message_text = ?
        ''', (chat_id, "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        conn.commit()
        
        cursor.execute('''
        SELECT is_ignored FROM messages 
        WHERE chat_id = ? AND message_text = ?
        ''', (chat_id, "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        result = cursor.fetchone()
        assert result[0] == 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        conn.close()
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)

def run_lite_tests():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ –û–¥–∞–Ω–Ω–∞...\n")
    
    try:
        test_database_basic()
        test_emotion_analysis()
        test_empathy_calculation()
        test_character_responses()
        test_memory_system()
        
        print("\n" + "="*50)
        print("üéâ –í–°–ï –£–ü–†–û–©–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! üéâ")
        print("üèÆ –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –û–¥–∞–Ω–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install -r requirements.txt")
        print("="*50)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    import sys
    success = run_lite_tests()
    sys.exit(0 if success else 1)